
# 2015-06-04 23:17:13.327291
+int('11110000', 2)

# 2015-06-04 23:18:36.469747
+bin(191)

# 2015-06-04 23:18:43.581531
+int('10110000', 2)

# 2015-06-05 00:48:54.126804
+ls

# 2015-06-05 00:48:56.925925
+cd

# 2015-06-05 00:48:58.068557
+ls

# 2015-06-05 00:49:07.145919
+import cv2

# 2015-06-05 12:04:37.375152
+ls

# 2015-06-05 18:24:28.599288
+import subprocess

# 2015-06-05 18:27:01.307576
+p = subprocess.check_output(["rfkill", "list"])

# 2015-06-05 18:27:03.603231
+p

# 2015-06-05 18:27:19.436224
+out = p.split('\n')

# 2015-06-05 18:28:01.850213
+out = p.decode("utf8").split('\n')

# 2015-06-05 18:28:03.019592
+out

# 2015-06-05 18:34:55.325103
+e = (out)

# 2015-06-05 18:34:55.969476
+e

# 2015-06-05 18:35:33.566480
+e = (e for e in L)

# 2015-06-05 18:35:37.571348
+e = (e for e in out)

# 2015-06-05 18:35:41.090150
+e

# 2015-06-05 18:37:08.612805
+while 1:
+    a = e.next()
+    if "Bluetooth" in e:
+        b = e.next()
+        if b.endswith("yes"):
+            print("locked")
+        break
+        

# 2015-06-05 18:40:20.783966
+e = iter(out)

# 2015-06-05 18:40:21.884307
+e

# 2015-06-05 18:40:27.153282
+while 1:
+    a = e.next()
+    if "Bluetooth" in e:
+        b = e.next()
+        if b.endswith("yes"):
+            print("locked")
+        break
+        

# 2015-06-05 18:40:35.529624
+e.next()

# 2015-06-05 18:41:09.300551
+e = iter(out)

# 2015-06-05 18:41:11.372979
+out

# 2015-06-05 18:41:12.516676
+e

# 2015-06-05 18:41:22.916719
+e.__next__()

# 2015-06-05 18:53:53.530382
+e = out.__iter__()

# 2015-06-05 18:53:54.153384
+e

# 2015-06-05 18:53:58.302916
+e.next()

# 2015-06-05 18:55:59.884143
+next(e)

# 2015-06-05 18:56:07.420639
+next

# 2015-06-05 18:58:31.917497
+while 1:
+    a = next(e)
+    if "Bluetooth" in e:
+        b = next(e)
+        if b.endswith("yes"):
+            print("locked")
+        break
+        

# 2015-06-05 18:58:43.340010
+e = iter(out)

# 2015-06-05 18:58:44.885362
+while 1:
+    a = next(e)
+    if "Bluetooth" in e:
+        b = next(e)
+        if b.endswith("yes"):
+            print("locked")
+        break
+        

# 2015-06-05 18:58:53.092711
+e = iter(out)

# 2015-06-05 18:58:55.840107
+e

# 2015-06-05 18:59:00.930247
+next(e)

# 2015-06-05 18:59:15.087203
+while 1:
+    a = next(e)
+    if "Bluetooth" in a:
+        b = next(e)
+        if b.endswith("yes"):
+            print("locked")
+        break
+        

# 2015-06-05 19:00:35.989650
+p = subprocess.check_output(["rfkill", "list"])

# 2015-06-05 19:00:37.020475
+p

# 2015-06-05 19:04:54.595222
+import subprocess

# 2015-06-05 19:05:04.310631
+out = subprocess.check_output(["rfkill", "list"]).decode("utf8").split("\n")

# 2015-06-05 19:05:06.460065
+out

# 2015-06-05 19:05:16.957142
+e = iter(out, 'EOF')

# 2015-06-05 19:05:24.359011
+e = iter(out)

# 2015-06-06 03:28:49.438650
+from math import sqrt

# 2015-06-06 03:29:08.785801
+sqrt(1920**2+1080**2)

# 2015-06-06 03:29:29.497358
+(14/_)*1920*25.4

# 2015-06-06 03:31:06.799991
+338/25.4

# 2015-06-06 03:31:16.661208
+190/25.4

# 2015-06-06 03:31:42.690840
+sqrt((338/25.4)**2+(190/25.4)**2)

# 2015-06-06 03:32:49.391541
+sqrt((300/25.4)**2+(188/25.4)**2)

# 2015-06-06 03:33:12.689334
+2202.9/13.9

# 2015-06-09 14:53:18.851399
+from math import log2

# 2015-06-09 14:53:30.608591
+log2("1065353216")

# 2015-06-09 14:53:35.395890
+log2("1065353216.")

# 2015-06-09 14:53:44.475800
+log2?

# 2015-06-09 14:53:50.111932
+log2("1065353216.0")

# 2015-06-09 14:53:56.764315
+log2(1065353216.0)

# 2015-06-12 11:07:04.538996
+from hashfs import HashFS

# 2015-06-12 11:08:05.355678
+fs = HashFS('temp_hashfs', depth=4, width=1, algorithm='sha256')

# 2015-06-12 11:11:57.151252
+from io import StringIO

# 2015-06-12 11:12:16.217473
+sc = StringIO('some content')

# 2015-06-12 11:12:26.103159
+address = fs.put(sc)

# 2015-06-12 11:12:51.505598
+address = fs.put(sc, '.txt')

# 2015-06-12 11:12:56.816361
+address.id

# 2015-06-12 11:13:15.533653
+address.abspath

# 2015-06-17 16:28:38.643512
+import http

# 2015-06-20 12:34:57.431384
+ls

# 2015-06-20 12:35:03.166024
+import cv2

# 2015-06-20 12:36:14.971452
+cv2.namedWindow("test", 0)

# 2015-06-20 12:36:37.183893
+copyrighr

# 2015-06-20 12:36:40.125926
+copyright

# 2015-06-24 12:00:53.395499
+import cv2

# 2015-06-25 20:55:14.730163
+import sys

# 2015-06-25 20:57:38.503070
+import cv2

# 2015-06-25 20:59:14.820632
+import sys

# 2015-06-25 20:59:16.932952
+sys.path

# 2015-06-25 21:13:41.773132
+import sys

# 2015-06-25 21:13:43.970415
+sys.path

# 2015-06-25 21:13:48.540745
+import cv2

# 2015-06-25 21:17:28.203676
+import sys

# 2015-06-25 21:17:30.207386
+sys.path

# 2015-06-25 21:18:28.037876
+import cv2

# 2015-06-25 21:18:32.925582
+import sys

# 2015-06-25 21:18:34.352398
+sys.path

# 2015-06-25 21:20:26.141643
+import sys

# 2015-06-25 21:20:27.276681
+sys.path

# 2015-06-25 21:21:32.935622
+import sys

# 2015-06-25 21:21:34.150781
+sys.path

# 2015-06-25 21:21:38.342855
+import cv2

# 2015-06-25 21:22:05.858373
+import sys

# 2015-06-25 21:22:07.129664
+sys.path

# 2015-06-25 21:22:10.967884
+import cv2

# 2015-06-25 21:22:14.748015
+cv2.absdiff

# 2015-06-26 22:48:03.892718
+import numpy as np

# 2015-06-26 22:48:05.879777
+hist

# 2015-06-26 22:48:12.977289
+import pandas as pd

# 2015-06-26 22:48:17.554933
+import matplotlib

# 2015-06-26 22:48:55.345648
+train_pd = pd.read_csv("a1_raw.csv")

# 2015-06-26 22:49:09.634781
+type(train_pd)

# 2015-06-26 22:49:22.219009
+train_pd.shape

# 2015-06-26 22:49:38.225226
+train_pd.head

# 2015-06-26 22:49:44.520236
+train_pd.head()

# 2015-06-26 22:50:24.776931
+train_pd.info()

# 2015-06-26 22:50:52.334628
+train_pd.describe()

# 2015-06-26 22:51:19.202202
+train_pd.target.unique()

# 2015-06-26 22:51:38.384096
+train_pd.lhx.unique()

# 2015-06-26 22:52:41.806095
+train_pd.phase.unique()

# 2015-06-26 22:52:45.573118
+train_pd.phase.unique

# 2015-06-26 22:52:49.402405
+train_pd.phase.unique()

# 2015-06-26 22:53:42.989478
+train_pd.phase.values()

# 2015-06-26 23:00:24.404696
+train_pd.phase.values

# 2015-06-26 23:01:47.848768
+from sklearn import svm

# 2015-06-27 00:07:24.886704
+%run -i gesture.py

# 2015-06-27 00:07:33.104763
+%run -i test.py

# 2015-06-27 00:07:37.607523
+binarized_labels

# 2015-06-27 00:07:43.632234
+labels

# 2015-06-27 00:07:51.259913
+binarized_labels.shape

# 2015-06-27 00:08:39.784448
+train_pd(train_pd.phase == 'Rest')

# 2015-06-27 00:08:52.239905
+train_pd[train_pd.phase == 'Rest']

# 2015-06-27 00:09:58.409051
+train_pd.phase.values

# 2015-06-27 00:10:03.426614
+train_pd.phase.unique()

# 2015-06-27 00:10:10.753885
+train_pd[train_pd.phase == 'Hold']

# 2015-06-27 00:10:23.373466
+binarized_labels[1071:1081]

# 2015-06-27 00:10:37.099211
+binarized_labels[1:10]

# 2015-06-27 00:11:31.020529
+train_pd.drop("target", axis=1)

# 2015-06-27 00:11:37.162590
+train_pd.drop("phase", axis=1)

# 2015-06-27 02:02:48.947314
+svm

# 2015-06-27 02:03:00.968152
+from sklearn import svm

# 2015-06-27 02:03:41.876842
+clf = svm.SVC(kernel="linear")

# 2015-06-27 02:04:09.053967
+clf.fit(train_pd, binarized_labels)

# 2015-06-27 02:04:27.739235
+train_pd.info

# 2015-06-27 02:04:30.958874
+train_pd.info()

# 2015-06-27 02:05:02.687704
+train_pd.drop("phase", axis=1, inplace=True)

# 2015-06-27 02:05:06.391068
+clf.fit(train_pd, binarized_labels)

# 2015-06-27 02:05:23.670991
+clf.fit(train_pd, labels)

# 2015-06-30 22:25:38.931512
+import y

# 2015-07-01 12:38:22.267052
+import shlex

# 2015-07-01 12:38:34.301542
+shlex.split("ping 8.8.8.8")

# 2015-07-01 12:38:44.603580
+shlex.__doc__

# 2015-07-02 23:57:32.461645
+a = '\xe4\xb8\x87'

# 2015-07-02 23:57:40.159291
+a.encode("gbk")

# 2015-07-02 23:57:49.730039
+a.encode("decode")

# 2015-07-02 23:57:58.217179
+a.decode("gbk")

# 2015-07-02 23:58:11.364295
+a.decode("utf8")

# 2015-07-02 23:58:31.138644
+a.decode("gb2312")

# 2015-07-02 23:58:43.233629
+b = "æˆ‘"

# 2015-07-02 23:58:53.361189
+b.encode("gbk")

# 2015-07-02 23:59:15.533939
+str.encode?

# 2015-07-03 00:00:09.026905
+b.decode("gbk")

# 2015-07-03 00:00:14.252347
+b.decode("utf8")

# 2015-07-03 00:01:34.189565
+a.encode("gbk")

# 2015-07-03 00:01:38.853047
+a

# 2015-07-03 00:33:26.084447
+import codecs

# 2015-07-03 18:31:03.318197
+from sklearn import svm

# 2015-07-03 18:31:15.898913
+X = [[0, 0], [1, 1]]

# 2015-07-03 18:31:30.916190
+y = []

# 2015-07-03 18:31:41.753189
+clf = svm.SVC()

# 2015-07-03 18:31:49.276871
+clf.fit(X,y)

# 2015-07-03 18:31:54.892166
+y

# 2015-07-03 18:32:06.781755
+y=[0,1]

# 2015-07-03 18:32:08.387763
+clf.fit(X,y)

# 2015-07-03 18:32:51.423614
+clf.predict([2., 2.])

# 2015-07-05 16:07:22.205787
+%run -h

# 2015-07-05 16:07:29.721259
+%run?

# 2015-07-05 16:08:21.203148
+%run -t -N1 -d letter.py

# 2015-07-05 16:09:04.273293
+%run -d letter.py

# 2015-07-05 16:17:59.731166
+%run -d -27 letter.py

# 2015-07-05 16:18:03.128656
+%run?

# 2015-07-05 16:18:15.479186
+%run -d -b27 letter.py

# 2015-07-05 16:18:43.869488
+%run -d -b26 letter.py

# 2015-07-05 16:18:54.425566
+%run -d letter.py

# 2015-07-05 16:34:32.939357
+%run -i letter.py

# 2015-07-05 16:34:39.202499
+test_result

# 2015-07-05 16:34:43.721607
+test_result == test_features

# 2015-07-05 16:37:06.535654
+test_set

# 2015-07-05 16:37:11.055990
+test_result

# 2015-07-05 16:37:48.636382
+type(test_result)

# 2015-07-05 16:38:53.104733
+%run -i letter.py

# 2015-07-05 16:39:53.258062
+%run -i ./letter.py

# 2015-07-05 16:40:47.819445
+numpy.array_equal(test_result, test_labels)

# 2015-07-05 16:41:54.650013
+test_labels == test_result

# 2015-07-05 16:42:36.652333
+com = (test_labels == test_result)

# 2015-07-05 16:42:52.205702
+com.cumsum?

# 2015-07-05 16:43:04.722396
+numpy.cumsum?

# 2015-07-05 16:44:37.385243
+numpy.count_nonzero(com)

# 2015-07-05 16:44:41.963142
+com.shape

# 2015-07-05 16:46:59.222520
+test_features.iloc[0:1]

# 2015-07-05 16:47:10.250261
+%run -i letter.py

# 2015-07-05 16:47:16.103563
+pwd

# 2015-07-05 16:47:33.031859
+cd /home/skt/code/letters

# 2015-07-05 16:47:34.996865
+cd /home/skt/code/letter

# 2015-07-05 16:47:37.381242
+%run -i letter.py

# 2015-07-05 17:06:41.857247
+%pdb

# 2015-07-05 17:06:43.082787
+%run -i letter.py

# 2015-07-05 17:14:02.578124
+%run -i letter.py letter_classficier

# 2015-07-05 21:29:54.382776
+import pandas

# 2015-07-05 21:30:41.732642
+ds = pandas.read_csv("./letter-recognition.data")

# 2015-07-05 21:30:53.137357
+for i in ds:
+    print(i)

# 2015-07-05 21:33:24.785913
+for index, row in ds.iterrows():
+    print(index, row.iloc(0))

# 2015-07-05 21:33:41.203622
+for index, row in ds.iterrows():
+    print(index, row.iloc[0])

# 2015-07-05 21:35:23.373843
+ds.shape

# 2015-07-05 21:35:50.212920
+%run -i letter.py letter_classficier

# 2015-07-05 21:36:08.252850
+%run -i letter_nn.py

# 2015-07-05 21:39:54.995524
+int('a')

# 2015-07-05 21:40:11.282077
+ord('a')

# 2015-07-05 21:40:15.156375
+ord?

# 2015-07-05 21:40:28.616990
+%run -i letter_nn.py

# 2015-07-05 21:46:59.140262
+%pdb

# 2015-07-05 21:47:00.588750
+%run -i letter_nn.py

# 2015-07-06 16:51:46.433438
+from __feature__ import braces

# 2015-07-06 16:52:17.933202
+from __furture__ import braces

# 2015-07-06 16:52:46.716317
+from __future__ import absolute_import

# 2015-07-10 11:57:29.569655
+float(a)

# 2015-07-10 11:57:35.182868
+float('a')

# 2015-07-11 22:18:58.214961
+import webbrowser

# 2015-07-11 22:19:21.499886
+f = '/home/skt/Documents/wavelet.pdf'

# 2015-07-11 22:19:39.577203
+webbrowser.open(f, new=0, autoraise=True)

# 2015-07-16 02:51:25.675845
+import urllib2

# 2015-07-16 02:51:46.770376
+urllib2.urlopen("http://www.baidu.com")

# 2015-07-25 17:52:39.873505
+a = 3

# 2015-07-25 17:52:40.882037
+a

# 2015-07-25 17:52:44.180762
+del a

# 2015-07-25 17:52:45.788560
+a

# 2015-07-29 12:49:34.599105
+import that

# 2015-07-29 12:49:42.446003
+import this

# 2015-08-03 10:35:51.863688
+from PyQt4 import QtGui

# 2015-08-03 10:36:01.446185
+QtGui.LeftDockWidgetArea

# 2015-08-03 10:36:14.583578
+QtGui.DockWidgetArea

# 2015-08-03 10:36:18.472958
+QtGui.DockWidgetAreas

# 2015-08-03 10:36:31.201071
+from PyQt4 import QtCore

# 2015-08-03 10:36:52.280915
+QtCore.LeftDockWidgetArea

# 2015-08-03 10:42:08.762188
+from PyQt4 import QtCore

# 2015-08-03 10:42:20.357130
+QtCore.Qt.LeftDockWidgetArea

# 2015-08-03 10:42:38.217182
+type(QtCore.Qt.LeftDockWidgetArea)

# 2015-08-03 10:42:47.240792
+type(QtCore.Qt.DockWidgetArea)

# 2015-08-03 13:21:01.630431
+QtCore.Qt.DockWidgetArea(1)

# 2015-08-03 13:21:03.889266
+QtCore.Qt.DockWidgetArea(2)

# 2015-08-03 13:59:14.699128
+from PyQt4 import QtCore

# 2015-08-03 14:03:07.485974
+8

# 2015-08-03 14:03:10.390311
+0

# 2015-08-03 15:45:05.740604
+from PyQt4 import QColor

# 2015-08-03 15:46:53.782166
+from PyQt4.QtCore import QColor

# 2015-08-03 15:46:59.362763
+from PyQt4.QtGui import QColor

# 2015-08-03 16:11:18.505920
+from PyQt4.QtCore import QList

# 2015-08-03 16:12:56.845640
+from PyQt4.QtCore import QLine

# 2015-08-03 17:53:55.400363
+5/3

# 2015-08-03 17:53:57.617295
+5//3

# 2015-08-03 21:45:42.869357
+ls

# 2015-08-03 23:11:53.742225
+5/3

# 2015-08-03 23:11:55.916640
+5//3

# 2015-08-04 17:01:42.848626
+globals()

# 2015-08-04 17:25:46.763136
+s = 'ç¾Žçš„'

# 2015-08-04 17:25:47.814399
+s

# 2015-08-04 17:26:01.134337
+from __future__ import unicode_literals

# 2015-08-04 17:26:03.813390
+s

# 2015-08-04 17:26:20.999956
+s = 'ç¾Žçš„'

# 2015-08-04 17:26:23.879613
+s

# 2015-08-05 12:43:40.811086
+logstart

# 2015-08-05 12:44:20.507267
+import cv2

# 2015-08-05 12:44:36.148710
+from PyQt4 import QtCore,QtGui

# 2015-08-05 12:46:11.513631
+get_ipython().magic('logstart')

# 2015-08-27 09:29:52.584923
+import lxml

# 2015-08-27 09:30:19.730405
+with open("test.html", "r") as f:
+    src = f.readall()

# 2015-08-27 09:30:50.000914
+with open("test.html", "r") as f:
+    src = f.readlines()

# 2015-08-27 09:31:06.294838
+import codecs

# 2015-08-27 09:32:13.360836
+with codecs.open("test.html", "r", "cp936") as f:
+    src = f.readlines()

# 2015-08-27 09:32:14.769184
+src

# 2015-08-27 13:52:07.090758
+src = ''.join(src)

# 2015-08-27 13:52:23.413924
+lxml.xpath?

# 2015-08-27 13:55:04.757695
+from lxml import stree

# 2015-08-27 13:55:09.895983
+from lxml import etree

# 2015-08-27 13:55:27.265855
+tree = etree.parse(src)

# 2015-08-27 13:55:34.181957
+tree

# 2015-08-27 13:55:37.420928
+tree = etree.parse(src)

# 2015-08-27 13:57:33.166741
+ f = StringIO('<foo><bar></bar></foo>')

# 2015-08-27 13:57:48.466786
+ f = '<foo><bar></bar></foo>'

# 2015-08-27 13:57:54.726433
+tree = etree.parse(f)

# 2015-08-27 14:00:52.925594
+import codecs

# 2015-08-27 14:01:15.064002
+f = codecs.open("test.html", "r", "cp936")

# 2015-08-27 14:01:24.792188
+from lxml import etree

# 2015-08-27 14:02:01.732298
+tree  = etree.parse(f)

# 2015-08-27 14:04:47.781156
+with codecs.open("test.html", "r", "cp936") as f:
+    src = f.readlines()

# 2015-08-27 14:05:01.336999
+src = ''.join(src)

# 2015-08-27 14:05:03.620171
+src

# 2015-08-27 14:05:19.857160
+from lxml import html

# 2015-08-27 14:05:31.433536
+html.fromstring(src)

# 2015-08-27 14:05:40.768397
+html.etree

# 2015-08-27 14:07:29.581661
+tree  = html.etree.parse(f)

# 2015-08-27 14:07:47.296010
+f = codecs.open("test.html", "r", "cp936")

# 2015-08-27 14:07:49.412796
+tree  = html.etree.parse(f)

# 2015-08-27 14:08:32.787583
+h = html.fromstring(src)

# 2015-08-27 14:08:34.514978
+h

# 2015-08-27 14:12:23.028892
+h.xpath('/html/body/div/div/table/tr/td/div/a')

# 2015-08-27 14:12:32.401076
+urls = h.xpath('/html/body/div/div/table/tr/td/div/a')

# 2015-08-27 14:12:35.585935
+urls[0]

# 2015-08-27 14:13:14.684874
+urls[0].base_url

# 2015-08-27 14:13:23.014367
+urls[0].body

# 2015-08-27 14:13:29.917720
+urls[0]

# 2015-08-27 14:13:52.087761
+urls[0].tag

# 2015-08-27 14:14:41.120699
+urls[0].text

# 2015-08-27 14:15:07.014187
+urls[0].href

# 2015-08-27 14:15:55.541965
+urls[0].a

# 2015-08-27 14:28:00.535929
+urls[0].iterlinks

# 2015-08-27 14:29:20.754057
+urls[0].values

# 2015-08-27 14:29:31.702593
+urls[0].base

# 2015-08-27 14:29:33.780800
+urls[0].base_url

# 2015-08-27 14:29:41.511480
+urls[0].body

# 2015-08-27 14:30:43.788963
+urls[0]

# 2015-08-27 14:31:20.733059
+urls[0].get

# 2015-08-27 14:31:24.697430
+urls[0].get()

# 2015-08-27 14:33:48.370968
+urls = h.xpath('/html/body/div/div/table/tr/td/div/a/text()')

# 2015-08-27 14:33:49.923939
+urls

# 2015-08-27 14:34:11.013544
+urls = h.xpath('/html/body/div/div/table/tr/td/div/a/@href')

# 2015-08-27 14:34:13.494541
+urls

# 2015-08-27 14:42:49.419698
+hist

# 2015-08-27 14:59:04.174005
+import requests

# 2015-08-27 14:59:21.635967
+requests.request("http://t66y.com/htm_data/20/1508/1614738.html")

# 2015-08-27 14:59:34.853814
+requests.request?

# 2015-08-27 14:59:52.638790
+requests.request("GET", "http://t66y.com/htm_data/20/1508/1614738.html")

# 2015-08-27 15:04:07.188271
+proxy  = {"127.0.0.1":8123}

# 2015-08-27 15:04:24.316794
+requests.request("GET", "http://t66y.com/htm_data/20/1508/1614738.html", proxies=proxy)

# 2015-08-27 15:04:49.770033
+requests.request("GET", url="http://t66y.com/htm_data/20/1508/1614738.html", proxies=proxy)

# 2015-08-27 15:05:55.338482
+requests.request(method="GET", url="http://t66y.com/htm_data/20/1508/1614738.html", proxies=proxy)

# 2015-08-27 15:06:44.912523
+s = requests.Session()

# 2015-08-27 15:11:02.439845
+r = s.get("http://t66y.com/htm_data/20/1508/1614738.html", cookies={'ismod':1}, proxies=proxy)

# 2015-08-27 15:12:03.693806
+r = s.get("http://t66y.com/htm_data/20/1508/1614738.html", proxies=proxy)

# 2015-08-27 15:14:23.430623
+r = requests.get("http://t66y.com/htm_data/20/1508/1614738.html", proxies=proxy)

# 2015-08-27 15:15:05.342255
+r = requests.get("http://t66y.com/htm_data/20/1508/1614738.html")

# 2015-08-27 15:15:42.170615
+r = requests.get('https://api.github.com/events')

# 2015-08-27 15:16:03.569332
+r

# 2015-08-27 15:16:09.106366
+r.content

# 2015-08-27 15:17:19.244034
+r = requests.get('http://cc.bearhk.info/htm_data/20/1508/1614738.html')

# 2015-08-27 15:17:33.960059
+r = requests.get('http://cc.bearhk.info/htm_data/20/1508/1614738.html', proxies=proxy)

# 2015-08-27 15:20:08.476865
+proxy = {
+"http": "http://127.0.0.1:8123"}

# 2015-08-27 15:20:11.386077
+r = requests.get('http://cc.bearhk.info/htm_data/20/1508/1614738.html', proxies=proxy)

# 2015-08-27 15:20:39.726095
+r.content

# 2015-08-27 15:21:30.897676
+r.text

# 2015-08-27 15:21:37.305526
+r.encoding

# 2015-08-27 15:21:42.291478
+r.encoding=utf8

# 2015-08-27 15:21:48.183126
+r.encoding="utf-8"

# 2015-08-27 15:21:49.951186
+r.text

# 2015-08-27 15:24:01.826095
+r.encoding='ISO-8859-1'

# 2015-08-27 15:24:05.744669
+r.text

# 2015-08-27 15:24:24.704802
+r.text.encode('ISO-8859-1')

# 2015-08-27 15:24:34.387013
+b = r.text.encode('ISO-8859-1')

# 2015-08-27 15:24:37.450762
+type(b)

# 2015-08-27 15:25:03.028595
+type(r.text)

# 2015-08-27 15:26:11.313092
+b.encode('utf-8')

# 2015-08-27 15:26:22.828403
+b.decode('utf-8')

# 2015-08-27 15:26:45.193450
+b = r.text.decode('ISO-8859-1').encode('utf-8')

# 2015-08-27 15:27:06.245239
+r.content

# 2015-08-27 15:27:24.221770
+b = r.content.decode('ISO-8859-1').encode('utf-8')

# 2015-08-27 15:27:25.620365
+b

# 2015-08-27 15:27:31.215138
+print(b)

# 2015-08-27 15:30:22.445052
+b = r.content.encode('utf-8')

# 2015-08-27 15:30:28.640826
+b = r.content.decode('utf-8')

# 2015-08-27 15:30:43.032985
+b = r.content.decode('iso-8879-1')

# 2015-08-27 15:30:52.161168
+r.encoding

# 2015-08-27 15:30:56.043863
+b = r.content.decode('iso-8859-1')

# 2015-08-27 15:30:57.551367
+b

# 2015-08-27 15:31:34.927820
+b = r.content.decode('iso-8859-1').encode('utf-8')

# 2015-08-27 15:31:35.831289
+b

# 2015-08-27 15:31:41.460370
+type(b)

# 2015-08-27 15:32:15.579284
+b = r.content.decode('iso-8859-1')

# 2015-08-27 15:32:16.943259
+b

# 2015-08-27 15:32:31.724751
+b = r.text.encode('utf-8')

# 2015-08-27 15:32:32.549520
+b

# 2015-08-27 15:32:49.992259
+b = r.text.encode('utf-8').decode('utf-8')

# 2015-08-27 15:32:50.600050
+b

# 2015-08-27 15:33:51.442001
+a = "æˆ‘"

# 2015-08-27 15:33:52.639536
+a

# 2015-08-27 15:33:55.908357
+type(a)

# 2015-08-27 15:34:06.079022
+a.encode('utf-8')

# 2015-08-27 15:34:21.436197
+a.encode('utf-8').decode('utf-8')

# 2015-08-27 15:35:01.654779
+import codecs

# 2015-08-27 15:35:20.022386
+codecs.decode(r.content, 'iso-8859-1')

# 2015-08-27 15:35:43.440742
+c = codecs.decode(r.content, 'iso-8859-1')

# 2015-08-27 15:35:45.943698
+type(c)

# 2015-08-27 15:36:28.474167
+d = codecs.encode(r.text, 'utf-8')

# 2015-08-27 15:36:29.291151
+d

# 2015-08-27 15:36:48.406320
+d = codecs.encode(r.text, 'utf-8').decode('utf-8')

# 2015-08-27 15:36:49.135725
+d

# 2015-08-27 15:38:03.501312
+print(t.text)

# 2015-08-27 15:38:07.124424
+print(r.text)

# 2015-08-27 15:40:56.671987
+r.text.decode("utf-8")

# 2015-08-27 15:41:07.997956
+r.content.decode("utf-8")

# 2015-08-27 15:47:25.452728
+r.content.decode("cp936")

# 2015-08-27 15:47:35.692872
+e = r.content.decode("cp936")

# 2015-08-27 15:47:36.196761
+e

# 2015-08-27 15:47:39.150143
+type(e)

# 2015-08-27 16:00:31.342878
+s = 'page=3'

# 2015-08-27 16:00:33.686799
+import re

# 2015-08-27 16:00:43.794311
+re.match('page=\\d+', s)

# 2015-08-27 16:00:55.788475
+m = re.match('page=\\d+', s)

# 2015-08-27 16:00:59.140362
+m.pos

# 2015-08-27 16:01:01.872318
+m.endpos

# 2015-08-27 16:03:30.662590
+s = '../../../read.php?tid=1614738&page=4'

# 2015-08-27 16:03:36.870016
+m = re.match('page=\\d+', s)

# 2015-08-27 16:03:37.665599
+m

# 2015-08-27 16:03:39.851696
+m.pos

# 2015-08-27 16:04:12.733178
+s

# 2015-08-27 16:04:31.118909
+m = re.search('page=\\d+', s)

# 2015-08-27 16:04:32.066674
+m

# 2015-08-27 16:04:51.167230
+m.pos

# 2015-08-27 16:05:03.472695
+m.start

# 2015-08-27 16:05:07.107856
+m.end

# 2015-08-27 16:05:09.615986
+m.start()

# 2015-08-27 16:05:13.042168
+m.end()

# 2015-08-27 16:05:29.534754
+m.endpos

# 2015-08-27 16:11:37.788324
+import html2text

# 2015-08-27 16:11:45.444705
+src

# 2015-08-27 16:11:52.630708
+html2text

# 2015-08-27 16:12:00.939284
+html2text.html2text

# 2015-08-27 16:12:04.527237
+html2text.html2text(src)

# 2015-08-27 16:12:33.779134
+html2text.html2text?

# 2015-08-27 16:12:40.972462
+html2text?

# 2015-08-27 16:12:51.392152
+help(html2text)

# 2015-09-08 20:29:36.699048
+%run -i login.py

# 2015-09-08 20:30:00.981701
+r

# 2015-09-08 20:30:04.546948
+r.content

# 2015-09-10 21:25:24.523868
+import urlib

# 2015-09-10 21:25:29.921181
+import urllib

# 2015-09-10 21:25:40.472385
+values = {'rid':    rid, 
+            'submit': 'SUBMIT'}

# 2015-09-10 21:25:54.586861
+values = {'rid':'rid', 
+            'submit': 'SUBMIT'}

# 2015-09-10 21:26:08.080202
+urllib.urlencode(values)

# 2015-09-10 21:26:34.134669
+import http

# 2015-09-10 21:26:38.758621
+http.__builtins__

# 2015-09-10 21:27:34.894977
+urllib.parse.urlencode(values)

# 2015-09-11 18:02:30.374009
+a = "123456789"

# 2015-09-11 18:02:35.207981
+a[5:3:-2]

# 2015-09-11 18:02:38.650173
+a[5:1:-2]

# 2015-09-12 11:07:28.187171
+import twisted

# 2015-09-14 21:13:55.879407
+import urllib.request, urllib.parse

# 2015-09-14 21:14:03.699185
+account = {"account_in":"8522", "password_in":"290071"}

# 2015-09-14 21:14:11.044856
+a = urllib.parse.urlencode(account)

# 2015-09-14 21:14:16.391638
+a

# 2015-09-14 21:14:49.379472
+a = a.encode('utf8')

# 2015-09-14 21:14:57.437180
+url = urllib.request.Request(url = "http://192.168.16.216/auth/Sea/login.php", data = a)

# 2015-09-14 21:14:59.285882
+url

# 2015-09-14 21:15:08.020012
+urllib.request.urlopen(url)

# 2015-09-14 21:15:20.923003
+a

# 2015-09-16 13:59:00.816352
+from sklearn.tree import DecisionTreeClassifier

# 2015-09-16 13:59:20.759978
+clf = DecisionTreeClassifier()

# 2015-09-16 13:59:22.233106
+clf

# 2015-09-16 16:22:46.530671
+from ipdb import set_trace

# 2015-09-16 16:22:49.827114
+set_trace()

# 2015-09-18 11:52:32.675247
+def a():
+    pass

# 2015-09-18 11:52:39.735161
+isinstance(a, function)

# 2015-09-18 11:52:46.992509
+isinstance(a, func)

# 2015-09-18 11:53:13.665206
+callable?

# 2015-09-18 11:53:17.594296
+callable(a)

# 2015-09-18 13:22:56.283975
+class a():
+    def __init__(self):
+        self.x = 3
+        self.f = lambda p: p<self.x

# 2015-09-18 13:23:00.091096
+a.f(3)

# 2015-09-18 13:23:08.699281
+s = a()

# 2015-09-18 13:23:13.031285
+s.f(3)

# 2015-09-18 13:23:35.482055
+class a():
+    def __init__(self):
+        self.x = 3
+        _ = 2
+        self.f = lambda p: p<_

# 2015-09-18 13:23:41.849951
+s = a()

# 2015-09-18 13:23:44.837956
+s.f(3)

# 2015-09-18 14:13:35.731070
+a = (2.8, 2.6, 2.2)

# 2015-09-18 14:13:38.789830
+2.2 in a

# 2015-09-24 16:49:52.907331
+from pydbg import *

# 2015-09-25 16:03:38.502475
+with open("data_batch_1", "rb") as f:
+    import pickle
+    dict = pickle.load(f)

# 2015-09-25 16:03:54.641935
+dict

# 2015-09-25 16:04:05.648339
+type(dict)

# 2015-09-25 16:04:17.953783
+data = dict

# 2015-09-25 16:04:23.825719
+data[0]

# 2015-09-25 16:04:32.467458
+print(data.keys())

# 2015-09-25 16:04:47.298205
+print(data[data])

# 2015-09-25 16:04:57.881956
+print(data['data'])

# 2015-09-25 16:05:08.339517
+type(data['data'])

# 2015-09-25 16:05:30.348916
+data['data'].shape

# 2015-09-25 16:05:42.555466
+32*32

# 2015-09-25 16:06:09.719904
+data['lebels']

# 2015-09-25 16:06:16.375797
+data['labels']

# 2015-09-25 16:06:22.871876
+ls

# 2015-09-25 16:07:16.904221
+with open("batches.meta", "rb") as f:
+    import pickle
+    met = pickle.load(f)

# 2015-09-25 16:07:20.039819
+met

# 2015-09-25 16:26:56.752898
+import theano

# 2015-09-26 14:49:28.500765
+from theano import *

# 2015-09-26 14:49:35.695171
+import theano.tensor as T

# 2015-09-26 14:49:48.636206
+x = T.dvector("x")

# 2015-09-26 14:49:58.703713
+y = T.dvector("y")

# 2015-09-26 14:50:07.753445
+A = T.dmatrix("A")

# 2015-09-26 14:50:17.840622
+x

# 2015-09-26 14:50:19.519360
+y

# 2015-09-26 14:50:24.842291
+type(y)

# 2015-09-26 14:50:37.196241
+z = x + A.dot(y)

# 2015-09-26 14:50:37.843956
+z

# 2015-09-26 14:50:40.805366
+pp(z)

# 2015-09-26 14:51:01.699039
+f = function([x, y, A], z)

# 2015-09-26 14:51:18.010996
+A

# 2015-09-26 14:51:37.773500
+A_data = np.random.random((10, 5))

# 2015-09-26 14:51:46.494275
+import numpy as np

# 2015-09-26 14:51:47.399284
+A_data = np.random.random((10, 5))

# 2015-09-26 14:51:50.245479
+A_data

# 2015-09-26 15:06:24.416337
+W1_shape = (50, 784)

# 2015-09-26 15:07:18.184886
+
+W1_shape = (50, 784)
+b1_shape = 50
+W2_shape = (10, 50)
+b2_shape = 10
+
+W1 = shared(np.random.random(W1_shape) - 0.5, name="W1")
+b1 = shared(np.random.random(b1_shape) - 0.5, name="b1")
+W2 = shared(np.random.random(W2_shape) - 0.5, name="W2")
+b2 = shared(np.random.random(b2_shape) - 0.5, name="b2")

# 2015-09-26 15:07:32.191917
+x = T.dmatrix("x")

# 2015-09-26 15:07:41.995027
+labels = T.dmatrix("labels")

# 2015-09-26 15:08:05.560608
+hidden = T.nnet.sigmoid(x.dot(W1.transpose()) + b1)

# 2015-09-26 15:08:07.776526
+hidden

# 2015-09-26 15:08:20.776137
+type(hidden)

# 2015-09-26 15:34:36.604911
+output = T.nnet.softmax(hidden.dot(W2.transpose()) + b2)

# 2015-09-26 15:34:44.438405
+shared?

# 2015-09-26 15:35:22.439304
+prediction = T.argmax(output, axis=1)

# 2015-09-26 15:35:33.711971
+reg_lambda = 0.0001

# 2015-09-26 15:36:22.356963
+regularization = reg_lambda * ((W1 * W1).sum() + (W2* W2).sum() + (b1 * b1).sum() + (b2 * b2).sum())

# 2015-09-26 15:36:28.248144
+pp(regularization)

# 2015-09-26 15:36:55.957142
+compute_predicion = function([x], prediction)

# 2015-09-26 15:37:14.157871
+alpha = T.dscalar("alpha")

# 2015-09-26 15:37:23.738849
+weights = [W1, W2, b1, b2]

# 2015-09-26 15:38:07.308268
+updates = [(w, w - alpha *grad(cost, w)) for w in weights]

# 2015-09-26 15:38:19.821311
+cost = []

# 2015-09-26 15:38:20.827537
+updates = [(w, w - alpha *grad(cost, w)) for w in weights]

# 2015-09-26 15:39:19.540626
+cost = T.nnet.binary_crossentropy(output, labels).mean() + regularization

# 2015-09-26 15:39:20.679853
+updates = [(w, w - alpha *grad(cost, w)) for w in weights]

# 2015-09-26 15:39:25.299480
+pp(cost)

# 2015-09-26 15:40:15.614415
+train_nn = function([x, labels, alpha], cost, updates=updates)

# 2015-09-26 15:41:27.221829
+alpha = 10.0
+labeled = encode_labels(train_set[1], 9)
+
+costs = []
+while True:
+    costs.append(float(train_nn(train_set[0], labeled, alpha)))
+
+    if len(costs) % 10 == 0:
+        print 'Epoch', len(costs), 'with cost', costs[-1], 'and alpha', alpha
+    if len(costs) > 2 and costs[-2] - costs[-1] < 0.0001:
+        if alpha < 0.2:
+            break
+        else:
+            alpha = alpha / 1.5

# 2015-09-26 15:45:10.026045
+def encode_labels(labels, max_index):
+    """Encode the labels into binary vectors."""
+    # Allocate the output labels, all zeros.
+    encoded = np.zeros((labels.shape[0], max_index + 1))
+
+    # Fill in the ones at the right indices.
+    for i in xrange(labels.shape[0]):
+        encoded[i, labels[i]] = 1
+    return encoded

# 2015-09-26 15:45:18.121951
+alpha = 10.0
+labeled = encode_labels(train_set[1], 9)
+
+costs = []
+while True:
+    costs.append(float(train_nn(train_set[0], labeled, alpha)))
+
+    if len(costs) % 10 == 0:
+        print 'Epoch', len(costs), 'with cost', costs[-1], 'and alpha', alpha
+    if len(costs) > 2 and costs[-2] - costs[-1] < 0.0001:
+        if alpha < 0.2:
+            break
+        else:
+            alpha = alpha / 1.5

# 2015-09-26 15:53:14.468787
+import cPickle, gzip
+
+# Load the dataset
+with gzip.open('mnist.pkl.gz', 'rb') as f:
+    train_set, valid_set, test_set = cPickle.load(f)

# 2015-09-26 15:53:41.145858
+alpha = 10.0
+labeled = encode_labels(train_set[1], 9)
+
+costs = []
+while True:
+    costs.append(float(train_nn(train_set[0], labeled, alpha)))
+
+    if len(costs) % 10 == 0:
+        print 'Epoch', len(costs), 'with cost', costs[-1], 'and alpha', alpha
+    if len(costs) > 2 and costs[-2] - costs[-1] < 0.0001:
+        if alpha < 0.2:
+            break
+        else:
+            alpha = alpha / 1.5

# 2015-09-26 16:00:55.920588
+hist

# 2015-09-26 16:11:23.725617
+from pca import pca

# 2015-09-26 16:16:03.685117
+import cPickle

# 2015-09-26 16:16:31.018506
+with open("./cifar-10-batches-py/data_batch_1", "rb") as f:
+    data = cPickle.load(f)

# 2015-09-26 16:16:37.661545
+data.keys()

# 2015-09-26 16:16:54.556608
+data['filename']

# 2015-09-26 16:16:57.377135
+data['filenames']

# 2015-09-26 16:17:06.638100
+data.keys()

# 2015-09-26 16:17:14.194899
+data['lebels']

# 2015-09-26 16:17:21.068090
+data['labels']

# 2015-09-26 16:17:41.985002
+data['batch_label']

# 2015-09-26 16:17:45.725323
+data.keys()

# 2015-09-26 16:18:37.198345
+from assignment1 import load_data

# 2015-09-26 16:18:50.157748
+data, label = load_data(0)

# 2015-09-26 16:19:46.493943
+from assignment1 import load_data

# 2015-09-26 16:19:50.019185
+data, label = load_data(1)

# 2015-09-26 16:19:51.472903
+data

# 2015-09-26 16:21:10.739350
+result = pca(data, 200)

# 2015-09-26 16:43:50.789435
+data.shape

# 2015-09-26 16:59:31.359129
+data = data.T

# 2015-09-26 16:59:33.945161
+data.shape

# 2015-09-26 16:59:52.055546
+data = data.T

# 2015-09-26 16:59:54.322894
+data.T

# 2015-09-26 17:00:08.601369
+S = data.T.dot(data)

# 2015-09-26 17:37:53.784725
+_, s, w = np.linglg.svd(data)

# 2015-09-26 17:39:27.652832
+import numpy as np

# 2015-09-26 17:39:29.632086
+_, s, w = np.linglg.svd(data)

# 2015-09-26 17:39:37.124288
+_, s, w = np.linalg.svd(data)

# 2015-09-26 18:25:16.099899
+w.shape

# 2015-09-26 18:25:21.978295
+_.shape

# 2015-09-26 18:25:27.119101
+_

# 2015-09-26 18:25:34.293246
+s.shape

# 2015-09-26 18:25:40.487605
+data.shape

# 2015-09-26 18:28:11.658767
+cPickle.dump(w, "eigen.pkl")

# 2015-09-26 18:28:44.714728
+with open("eigen.pkl", "wb") as f:
+    cPickle.dump(w, f)

# 2015-09-26 18:29:29.897120
+w

# 2015-09-26 18:38:39.054952
+data[0]

# 2015-09-26 18:38:53.709367
+from pprint import pprint

# 2015-09-26 18:39:00.369253
+pprint(data[0])

# 2015-09-26 22:42:20.701242
+hist

# 2015-09-28 09:08:32.359021
+a = [1, 2]

# 2015-09-28 09:08:37.067143
+b = [2, 3]

# 2015-09-28 09:09:00.351784
+''.join((a,b))

# 2015-09-28 09:09:49.478363
+list.extend

# 2015-09-28 09:09:51.130424
+list.extend?

# 2015-09-28 09:10:23.865222
+c = []

# 2015-09-28 09:59:57.460199
+import pickle

# 2015-09-28 10:05:58.206737
+with open("./cifar-10-batches-py/test_batch") as f:
+    data = pickle(f, encoding="latin1")

# 2015-09-28 10:06:09.401424
+with open("./cifar-10-batches-py/test_batch") as f:
+    data = pickle.load(f, encoding="latin1")

# 2015-09-28 10:06:30.427118
+with open("./cifar-10-batches-py/test_batch", "rb") as f:
+    data = pickle.load(f, encoding="latin1")

# 2015-09-28 10:06:32.633945
+ta

# 2015-09-28 10:06:34.217771
+data

# 2015-09-28 10:06:40.874178
+data['data']

# 2015-09-28 10:25:39.176026
+import numpy as np

# 2015-09-28 10:25:55.020976
+a = np.array([2, 4, 6])

# 2015-09-28 10:26:01.305612
+a.argmin()

# 2015-09-28 10:26:06.537430
+a.min()

# 2015-09-28 16:48:41.718005
+a = input("")

# 2015-09-28 16:48:44.347899
+a

# 2015-09-28 16:56:07.804157
+input()

# 2015-09-28 19:27:46.414120
+import pickle

# 2015-09-28 19:28:35.194549
+with open("v2.pkl", "rb") as f:
+    v = pickle.load(f)

# 2015-09-28 19:28:36.975698
+v

# 2015-09-28 19:28:40.163489
+v.shape

# 2015-09-28 21:08:51.451987
+type(v)

# 2015-09-28 21:08:57.261799
+import numpy as np

# 2015-09-28 21:09:05.293684
+a = np.array(range(10))

# 2015-09-28 21:09:05.983701
+a

# 2015-09-28 21:09:10.351630
+a.shape

# 2015-09-28 21:09:17.104350
+a.reshape(2, -1)

# 2015-09-28 21:09:19.953794
+a[0]

# 2015-09-28 21:09:42.207198
+b = a.reshape(2, -1)

# 2015-09-28 21:09:43.747995
+b[0]

# 2015-09-28 21:16:17.922434
+%run -d assignment1_â…¡.py 

# 2015-09-29 15:19:33.961621
+from sklearn.metrics import confusion_matrix

# 2015-09-29 15:19:42.258889
+y0 = [1, 2, 3]

# 2015-09-29 15:19:49.281370
+y1 = [1, 2, 4]

# 2015-09-29 15:19:57.497245
+confusion_matrix(y0, y1)

# 2015-09-29 21:49:07.895704
+ls

# 2015-09-29 21:57:47.260275
+a = 3

# 2015-09-29 21:57:48.164986
+a

# 2015-09-29 22:24:59.430011
+ls

# 2015-09-29 22:25:04.625576
+import this

# 2015-09-30 15:21:26.827838
+import assignment1_â… 

# 2015-09-30 22:37:49.618989
+from lxml import html

# 2015-09-30 22:38:17.832777
+with open("r.html", 'r') as f:
+    text = f.read()

# 2015-09-30 22:38:21.276091
+text

# 2015-09-30 22:39:07.089292
+h = html.fromstring(text)

# 2015-09-30 22:39:09.039622
+h

# 2015-09-30 22:39:26.875449
+h.xpath("/html/body/table/tr/td/text()")

# 2015-09-30 22:39:34.170758
+h.xpath("/html/body/table/tr/td/font/text()")

# 2015-10-03 21:34:45.011033
+ls

# 2015-10-03 21:36:48.366729
+%cd downloads

# 2015-10-05 21:43:16.633362
+import Xlib

# 2015-10-05 22:00:48.492410
+import xlib

# 2015-10-05 22:00:52.557205
+import Xlib

# 2015-10-05 22:01:48.300513
+from PyQt4 import QtGui

# 2015-10-05 23:46:14.523919
+abs(True)

# 2015-10-05 23:46:18.288095
+abs(False)

# 2015-10-10 13:42:24.986653
+import serial

# 2015-10-10 13:42:54.528826
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-10-10 13:43:01.779446
+serial.Serial?

# 2015-10-10 13:43:29.791670
+s

# 2015-10-10 13:43:38.862148
+s.writable()

# 2015-10-10 13:43:44.840665
+s.write("abcd")

# 2015-10-10 13:43:51.175646
+s.write?

# 2015-10-10 13:43:59.300101
+s.write(b'abcd')

# 2015-10-10 13:45:07.237056
+import serial

# 2015-10-10 13:45:10.656574
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-10-10 13:45:18.812768
+s.readall()

# 2015-10-10 13:45:38.526497
+s.read()

# 2015-10-10 13:45:50.128511
+s.readall()

# 2015-10-10 13:48:54.725170
+s.readall??

# 2015-10-10 13:49:11.956685
+s.readall()

# 2015-10-10 13:51:31.110161
+s.write(b'abcd')

# 2015-10-10 13:51:34.742811
+s.write(b'abcd\n')

# 2015-10-10 13:51:53.532358
+s.write(b'\nabcd')

# 2015-10-10 13:52:08.304659
+s.write(b'\n\rabcd')

# 2015-10-10 13:52:15.356797
+s.write(b'\r\nabcd')

# 2015-10-10 13:54:23.715960
+s.close()

# 2015-10-10 14:00:05.197620
+s.open()

# 2015-10-10 14:00:07.878217
+s.open?

# 2015-10-10 14:20:23.545211
+import serial

# 2015-10-10 14:20:35.967528
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-10-10 14:20:47.341493
+s.write(b'abcd')

# 2015-10-10 14:20:55.983131
+s.read()

# 2015-10-10 20:59:38.607738
+import math

# 2015-10-10 20:59:58.252847
+math.atan(1/10000)

# 2015-10-10 21:00:14.755706
+math.atan(1/10000)*3600

# 2015-10-10 21:23:13.672895
+import serial

# 2015-10-10 21:23:18.578089
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-10-10 21:23:29.329103
+s.write(b'abcd')

# 2015-10-10 21:24:29.954838
+with open("minicom.log", "rb") as f:
+    s.write(f)

# 2015-10-10 21:24:49.615500
+with open("minicom.log", "rb") as f:
+    src = f.read()

# 2015-10-10 21:24:52.501634
+len(src)

# 2015-10-10 21:25:04.646981
+s.write(src)

# 2015-10-10 21:40:52.383752
+with open("t", "rb") as f:
+    src = f.read()

# 2015-10-10 21:41:48.109975
+len(src)

# 2015-10-10 21:42:15.895643
+s.write(src)

# 2015-10-10 21:55:56.725353
+import serial

# 2015-10-10 21:56:02.301998
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-10-10 21:57:00.420698
+s.read(2486)

# 2015-10-10 21:57:25.236687
+with open("application.md", "wb") as f:
+    f.write(_)

# 2015-10-10 23:37:04.686035
+import math

# 2015-10-10 23:37:27.370345
+math.atan("1/100")

# 2015-10-10 23:37:33.005041
+math.atan(1/100)

# 2015-10-10 23:37:40.578347
+_*3600

# 2015-10-10 23:37:50.766914
+math.atan(1)

# 2015-10-10 23:38:44.783236
+math.atan(1/15000)*180*3600/math.pi

# 2015-10-10 23:38:58.748653
+math.atan(1/100)*180*3600/math.pi

# 2015-10-10 23:39:05.539467
+math.atan(1/100)*180*60/math.pi

# 2015-10-11 09:30:32.859361
+import bsddb

# 2015-10-11 09:30:38.220658
+bsddb?

# 2015-10-11 16:44:01.614872
+class a:
+    a1 = 1

# 2015-10-11 16:47:36.647652
+class a:
+    a1 = 1
+
+    def __init__(self):
+        print(id(self.a1))

# 2015-10-11 16:47:43.960028
+aa = a()

# 2015-10-11 16:47:47.725121
+bb = a()

# 2015-10-11 16:49:03.289617
+aa.a1 = 2

# 2015-10-11 16:49:05.392949
+bb.a1

# 2015-10-11 16:49:31.918750
+id(1)

# 2015-10-11 16:50:03.573765
+class b:
+    print("ttt")

# 2015-10-11 16:57:42.642179
+len(src)

# 2015-10-11 16:58:46.859072
+ls

# 2015-10-11 17:10:05.529134
+run

# 2015-10-13 18:06:31.469632
+import os

# 2015-10-13 18:06:36.060907
+os.getenv()

# 2015-10-13 18:06:45.865220
+os.environ()

# 2015-10-13 18:06:47.890594
+os.environ

# 2015-10-13 22:41:00.250192
+fobj = open("test", "a")

# 2015-10-13 22:48:08.666266
+fobj.write("meg")

# 2015-10-13 22:48:24.452965
+fobj.flush()

# 2015-10-13 22:48:31.155490
+fobj.write("meg2")

# 2015-10-13 22:48:32.561253
+fobj.flush()

# 2015-10-13 22:49:49.004430
+fobj.close()

# 2015-10-13 22:49:53.763008
+fobj = open("test", "w")

# 2015-10-13 22:50:00.001817
+fobj.write("meg3")

# 2015-10-13 22:50:03.067155
+fobj.flush()

# 2015-10-15 10:38:01.599138
+import pyusb

# 2015-10-15 10:38:43.411047
+import usb.core

# 2015-10-15 10:38:50.199685
+dev = usb.core.find()

# 2015-10-15 10:38:51.273914
+dev

# 2015-10-15 10:39:22.195200
+usb.core.find?

# 2015-10-23 18:42:28.749259
+import concurrent.futures

# 2015-10-23 18:42:40.171615
+con

# 2015-10-27 17:15:36.367446
+from ctypes import libc

# 2015-10-27 17:15:45.013115
+from ctypes import LibraryLoader

# 2015-10-27 17:51:56.562750
+from ctypes import CDLL

# 2015-10-27 17:52:11.264465
+libc = CDLL("libc.so")

# 2015-10-27 17:52:47.137573
+libc = CDLL("libc.so.6")

# 2015-10-27 17:53:53.680272
+libc.prctl

# 2015-10-27 17:55:52.679326
+libc.prctl(36)

# 2015-10-27 17:56:11.860562
+libc.prctl(37)

# 2015-10-27 18:04:27.536383
+libc.prctl(36, 1)

# 2015-10-27 18:04:30.699491
+libc.prctl(37)

# 2015-10-27 18:04:32.156787
+libc.prctl(36, 1)

# 2015-10-27 18:34:47.058982
+os.wait()

# 2015-10-27 18:34:50.042127
+import os

# 2015-10-27 18:34:50.954029
+os.wait()

# 2015-10-27 20:13:56.780755
+import psutil

# 2015-10-27 20:14:14.658681
+p = psutil.Process(os.getpid())

# 2015-10-27 20:14:15.871567
+p

# 2015-10-27 20:14:30.876294
+children = p.get_children()

# 2015-10-27 20:14:56.960062
+p??

# 2015-10-27 20:15:37.893558
+children = p.children()

# 2015-10-27 20:15:40.049598
+children

# 2015-10-27 20:15:48.057244
+p.status()

# 2015-10-27 20:21:26.681996
+import pstats

# 2015-10-27 20:21:30.516435
+import psutil

# 2015-10-27 20:21:37.190973
+psutil.Process?

# 2015-10-27 20:21:49.758372
+psutil.Process??

# 2015-10-27 20:22:30.509929
+psutil.pids

# 2015-10-27 20:22:32.864407
+psutil.pids()

# 2015-10-27 20:22:36.793086
+import os

# 2015-10-27 20:22:41.914039
+os.getpid()

# 2015-10-27 20:22:53.857563
+p = psutil.Process(21457)

# 2015-10-27 20:22:56.314853
+p??

# 2015-10-27 20:23:04.945224
+p.pid

# 2015-10-27 20:23:09.543064
+p.pid()

# 2015-10-27 20:23:18.137818
+p??

# 2015-10-27 20:30:05.833295
+import os

# 2015-10-27 20:30:13.942502
+os.waitpid?

# 2015-10-27 20:30:21.515929
+os.waitpid??

# 2015-10-27 20:53:49.939585
+for i in range(5):
+    print(i)
+else:
+    print("err")

# 2015-10-27 21:00:57.720050
+import psutil

# 2015-10-27 21:01:03.358809
+psutil.Process??

# 2015-10-27 21:02:50.617586
+p = psutil.Process()

# 2015-10-27 21:02:52.936731
+p??

# 2015-10-27 21:06:56.830175
+import psutil

# 2015-10-27 21:07:05.494263
+help(psutil.Process.kill)

# 2015-10-27 21:16:58.391134
+!man signal()

# 2015-10-27 21:17:06.787328
+!man signal

# 2015-10-29 21:17:47.821933
+import ctypes

# 2015-10-29 21:18:03.815249
+libpinyin = ctypes.CDLL("libpinyin.so.6")

# 2015-10-29 21:18:06.810035
+libpinyin

# 2015-10-29 21:18:29.061596
+libpinyin.pinyin_parse_more_full_pinyins

# 2015-10-29 21:19:02.794560
+libpinyin.pinyin_init

# 2015-10-29 21:19:07.716124
+libpinyin.pinyin_init?

# 2015-10-29 21:19:21.362151
+libpinyin.pinyin_init()

# 2015-10-29 21:22:13.147344
+libpinyin.pinyin_init("/usr/lib/libpinyin/data/", "/home/skt/.config/fcitx/libpinyin/data/")

# 2015-11-02 12:32:35.106699
+n.py

# 2015-11-02 12:32:58.694403
+%run -d libpinyin.py

# 2015-11-02 12:33:00.258234
+ls

# 2015-11-02 12:33:09.730977
+%cd ../

# 2015-11-02 12:33:42.490849
+%cd ../../

# 2015-11-02 12:33:42.913952
+ls

# 2015-11-02 12:33:47.786876
+%cd -

# 2015-11-02 12:33:48.889317
+ls

# 2015-11-02 12:34:33.102496
+%cd ../

# 2015-11-02 12:34:33.805843
+ls

# 2015-11-02 12:34:57.758338
+%run 

# 2015-11-02 12:35:20.097506
+%run -d

# 2015-11-02 12:36:18.492278
+%run -d libpinyin.py

# 2015-11-02 12:37:57.505918
+%urun -d libpinyin.py

# 2015-11-02 12:38:03.502232
+%run -d libpinyin.py

# 2015-11-02 12:38:14.543033
+%cd ../../

# 2015-11-02 12:38:18.265230
+%run -d libpinyin.py

# 2015-11-02 12:45:46.269591
+import ctypes

# 2015-11-02 12:45:50.453986
+ctype.c_uint

# 2015-11-02 12:45:59.350497
+ctypes.c_uint?

# 2015-11-02 12:46:18.069730
+ctypes.c_uint.value

# 2015-11-02 12:59:21.158140
+ctypes.pointer

# 2015-11-02 12:59:24.582715
+ctypes.POINTER

# 2015-11-02 12:59:35.709121
+ctypes.POINTER is ctypes.pointer

# 2015-11-02 12:59:43.737294
+ctypes.POINTER?

# 2015-11-02 12:59:45.885202
+ctypes.POINTER??

# 2015-11-02 12:59:48.845355
+ctypes.pointer?

# 2015-11-02 12:59:52.716665
+ctypes.pointer??

# 2015-11-02 13:02:57.549883
+charptr = ctypes.POINTER(ctypes.c_char)

# 2015-11-02 13:02:59.830481
+buf = charptr

# 2015-11-02 13:03:02.231586
+buf = charptr()

# 2015-11-02 13:03:03.453081
+buf

# 2015-11-02 13:22:11.545736
+%run -d libpinyin.py

# 2015-11-07 04:04:28.301673
+from neovim import attach

# 2015-11-07 04:05:45.716340
+nvim = attach('socket', path='/tmp/nvimmfGyuG')

# 2015-11-07 04:05:58.891933
+nvim = attach('socket', path='/tmp/nvimmfGyuG/0')

# 2015-11-07 04:06:07.134815
+nvim.current.line

# 2015-11-07 04:06:29.971761
+nvim.vars

# 2015-11-07 04:06:40.201315
+nvim.channel_id

# 2015-11-07 04:06:44.087567
+nvim.metadata

# 2015-11-07 04:07:15.617677
+nvim.metadata[0]

# 2015-11-07 04:07:30.895668
+nvim.vars

# 2015-11-07 04:07:39.256962
+nvim.vars.fdm

# 2015-11-07 04:07:51.698791
+nvim.options

# 2015-11-07 04:07:54.377903
+nvim.options.get

# 2015-11-07 04:08:00.439501
+nvim.options.get('fdm')

# 2015-11-07 04:08:07.034682
+nvim.options.get('&fdm')

# 2015-11-07 04:08:09.982057
+nvim.options.get('')

# 2015-11-07 04:08:46.373127
+nvim.funcs.omnifuncs

# 2015-11-07 04:08:47.916145
+nvim.funcs.omnifunc

# 2015-11-07 04:09:03.680197
+nvim.funcs.www

# 2015-11-07 04:09:31.523562
+nvim.buffers

# 2015-11-07 04:10:41.394984
+nvim.options.get('foldmethod')

# 2015-11-07 04:10:45.841208
+nvim.options.get('&foldmethod')

# 2015-11-07 04:12:39.750255
+nvim.vars['fdm']

# 2015-11-07 04:12:52.978752
+nvim.vars['global_var']

# 2015-11-07 04:13:38.290894
+nvim.vars['tagbar_left']

# 2015-11-07 04:14:09.591300
+nvim.options['fdm']

# 2015-11-07 04:14:21.577297
+nvim.vvars

# 2015-11-07 04:14:26.836001
+nvim.vvars['fmd']

# 2015-11-07 04:16:08.422729
+nvim.vvars['fdm']

# 2015-11-07 04:16:32.755893
+nvim.options['fdm']

# 2015-11-07 04:16:41.221382
+nvim.options['foldmethod']

# 2015-11-07 04:20:46.385664
+nvim.buffers[0].foldmethod

# 2015-11-07 04:21:05.428480
+nvim.windows[1].width

# 2015-11-07 04:21:11.212979
+nvim.windows[0].width

# 2015-11-07 04:21:15.045523
+nvim.windows[0].width = 10

# 2015-11-07 04:21:44.059745
+type(nvim.windows[0])

# 2015-11-07 04:22:42.706423
+type(nvim.windows[0].width)

# 2015-11-07 04:25:03.702535
+nvim.windows[0].options['fdm']

# 2015-11-07 04:25:23.118982
+nvim.windows[0].options['omnifunc']

# 2015-11-07 04:25:25.926054
+nvim.windows[0].options['omnifuncs']

# 2015-11-07 04:25:59.272925
+nvim.buffers[0].options['omnifuncs']

# 2015-11-07 04:26:34.186875
+buffer

# 2015-11-07 04:26:41.701710
+buffer = nvim.buffers[0]

# 2015-11-07 04:26:50.437494
+buffer.options['omnifunc']

# 2015-11-07 04:27:03.966512
+nvim.buffers[0].options['omnifunc']

# 2015-11-07 04:29:26.113335
+buffer.__name__

# 2015-11-07 04:29:34.966347
+def a():
+    pass

# 2015-11-07 04:29:45.993516
+a.__name__

# 2015-11-07 04:36:23.416492
+from neovim import attach

# 2015-11-07 04:36:39.882438
+nvim = attach('socket', path='/tmp/nvimpUavy7/0')

# 2015-11-07 04:36:45.174984
+pwd

# 2015-11-07 04:37:00.272762
+cd .vim/rpluin

# 2015-11-07 04:37:08.211789
+cd .vim/rplugin

# 2015-11-07 04:37:09.222124
+ls

# 2015-11-07 04:37:26.145272
+%cd python

# 2015-11-07 04:37:31.485080
+import libpinyin

# 2015-11-07 04:37:43.485377
+l = libpinyin.Libpinyin

# 2015-11-07 04:37:46.359985
+l = libpinyin.Libpinyin()

# 2015-11-07 04:37:53.156325
+l = libpinyin.Libpinyin(nvim)

# 2015-11-07 04:38:05.297281
+l.pinyin_init()

# 2015-11-07 04:38:18.982395
+l.parse("wo")

# 2015-11-07 04:38:26.784546
+l.parse(b"wo")

# 2015-11-07 12:02:40.033466
+from neovim import attach

# 2015-11-07 12:03:21.140019
+nvim = attach('socket', path='/tmp/nvim3LfzjS/0')

# 2015-11-07 12:03:32.814505
+nvim.current.line

# 2015-11-07 12:05:10.775097
+buffer = nvim.buffers[0]

# 2015-11-07 12:05:18.012172
+buffer.options['omnifunc']

# 2015-11-07 12:05:39.708165
+buffer.options['omnifunc']='Libpinyin'

# 2015-11-07 12:05:41.699840
+buffer.options['omnifunc']

# 2015-11-07 12:09:27.748682
+nvim = attach('socket', path='/tmp/nvimP7YRbu/0')

# 2015-11-07 12:10:02.260409
+from neovim import attach

# 2015-11-07 12:10:05.677104
+nvim = attach('socket', path='/tmp/nvimP7YRbu/0')

# 2015-11-07 12:10:21.924422
+from .libpinyin import Libpinyin

# 2015-11-07 12:10:28.892052
+from libpinyin import Libpinyin

# 2015-11-07 12:10:34.780226
+l = libpinyin.Libpinyin(nvim)

# 2015-11-07 12:10:41.185736
+l = Libpinyin(nvim)

# 2015-11-07 12:11:04.844115
+l.pinyin_init()

# 2015-11-07 12:14:51.932742
+%run -d libpinyin.py

# 2015-11-07 12:15:32.692350
+%ls -l /tmp/nvim*

# 2015-11-07 12:15:52.492514
+%run -d libpinyin.py /tmp/nvimP7YRbu/0

# 2015-11-07 12:17:15.815879
+%run -d libpinyin.py

# 2015-11-07 14:51:41.006956
+from neovim import attach

# 2015-11-07 14:51:49.454798
+nvim = attach('socket', path='/tmp/nvimKOLjE2/0')

# 2015-11-07 14:52:29.934806
+%run -d libpinyin.py /tmp/nvimKOLjE2/0

# 2015-11-07 16:48:16.765964
+from neovim import attach

# 2015-11-07 16:48:25.099974
+nvim = attach('socket', path='/tmp/nvimmuyMvO/0')

# 2015-11-07 16:48:39.237532
+nvim.current.window

# 2015-11-07 16:48:54.468226
+w = nvim.current.window 

# 2015-11-07 16:49:01.582207
+w.cursor

# 2015-11-07 16:54:10.017764
+a = "abc"

# 2015-11-07 16:54:22.763538
+a.encode('ascii')

# 2015-11-07 16:54:47.290286
+a.encode('utf8')

# 2015-11-07 16:54:55.688276
+a = "æˆ‘"

# 2015-11-07 16:54:57.526330
+a.encode('ascii')

# 2015-11-07 21:10:47.872508
+import backtrace

# 2015-11-07 21:16:06.771751
+import traceback

# 2015-11-07 21:16:13.108964
+traceback.print_tb

# 2015-11-07 21:16:15.360405
+traceback.print_tb()

# 2015-11-07 21:17:35.977422
+exc_type, exc_value, exc_traceback = sys.exc_info()

# 2015-11-07 21:17:39.184108
+import sys

# 2015-11-07 21:17:41.137233
+exc_type, exc_value, exc_traceback = sys.exc_info()

# 2015-11-07 21:17:49.954047
+traceback.print_tb(exc_traceback)

# 2015-11-07 21:18:02.073657
+exc_type

# 2015-11-07 21:18:08.352438
+sys.exc_info()

# 2015-11-07 21:18:40.936189
+traceback.print_stack()

# 2015-11-07 21:21:20.314519
+traceback.print_stack(sys.stderr)

# 2015-11-07 21:22:35.161121
+traceback.print_stack(file=sys.stderr)

# 2015-11-07 21:27:01.507775
+sys.stderr.writelines([repr(e) for e in traceback.extract_stack()])

# 2015-11-07 21:27:15.344988
+traceback.extract_stack()

# 2015-11-07 21:27:28.966732
+s = _

# 2015-11-07 21:27:29.801777
+s

# 2015-11-07 21:27:40.841717
+sys.stderr.writelines([repr(e) for e in s])

# 2015-11-07 21:27:47.306450
+sys.stdout.writelines([repr(e) for e in s])

# 2015-11-07 21:28:15.970341
+sys.stderr.writelines([repr(e)+'\n' for e in traceback.extract_stack()])

# 2015-11-07 21:42:23.290145
+import time

# 2015-11-07 21:42:28.573780
+time.clock()

# 2015-11-07 21:42:46.193798
+import time

# 2015-11-07 21:42:57.417952
+time.clock()

# 2015-11-08 15:47:44.594931
+a = b'q'

# 2015-11-08 15:47:51.536444
+b = b'w'

# 2015-11-08 15:48:00.044552
+a+b

# 2015-11-08 15:48:05.300887
+a.append(b)

# 2015-11-08 15:48:22.997186
+a+=b

# 2015-11-08 15:48:24.060949
+a

# 2015-11-08 17:10:39.408805
+from neovim import attach

# 2015-11-08 17:10:47.910592
+nvim = attach('socket', path='/tmp/nvimPxzFb7/0')

# 2015-11-08 17:11:04.166399
+nvim.current.window.cursor

# 2015-11-08 22:22:05.185917
+filter(str.isalpha, 'abc')

# 2015-11-08 22:22:44.443021
+all(str.isalpha, 'abc')

# 2015-11-08 22:22:48.655543
+all?

# 2015-11-08 22:23:54.373900
+all((str.isalpha(e) for e in 'abc'))

# 2015-11-08 22:24:05.702587
+all((str.isalpha(e) for e in 'ab.hd'))

# 2015-11-08 22:25:04.186399
+filter(lambda x: not str.isalpha(x), 'abc')

# 2015-11-08 22:25:16.540757
+filter(lambda x: not str.isalpha(x), '123')

# 2015-11-08 22:25:59.411980
+%timeit filter(lambda x: not str.isalpha(x), '123')

# 2015-11-08 22:26:18.003428
+%timeit all((str.isalpha(e) for e in 'ab.hd'))

# 2015-11-08 22:27:29.263666
+not 'abs'

# 2015-11-09 16:30:36.084518
+from libpinyin_wrapper import Libpinyin_Wrapper

# 2015-11-09 16:30:43.044031
+l = Libpinyin_Wrapper()

# 2015-11-09 16:33:22.500315
+from pathlib import Path

# 2015-11-09 16:33:26.699954
+Path.home()

# 2015-11-09 16:33:46.462289
+print(Path.home())

# 2015-11-09 16:34:05.820009
+a = Path.home()

# 2015-11-09 16:34:12.531779
+a.absolute()

# 2015-11-09 16:34:41.754227
+a.as_uri

# 2015-11-09 16:34:45.283838
+a.as_uri()

# 2015-11-09 16:34:54.422043
+a.as_posix()

# 2015-11-09 16:37:49.293003
+from libpinyin_wrapper import Libpinyin_Wrapper

# 2015-11-09 16:37:53.828291
+l = Libpinyin_Wrapper()

# 2015-11-09 16:38:02.244435
+l.parse(b"wo")

# 2015-11-09 16:46:18.189302
+from neovim import attach

# 2015-11-09 16:46:30.917405
+nvim = attach('socket', path='/tmp/nvim41Vk1f/0')

# 2015-11-12 14:17:11.639744
+from app import app

# 2015-11-12 15:16:26.503961
+import test

# 2015-11-12 16:31:16.441197
+ls

# 2015-11-17 19:26:48.094121
+i = 0

# 2015-11-17 19:26:55.954962
+while 1:
+    i += 1
+    

# 2015-11-18 16:40:32.928078
+import math.tan

# 2015-11-18 16:40:40.793695
+from math import tan

# 2015-11-18 16:40:50.714082
+from math import pi

# 2015-11-18 16:41:01.503874
+tan(pi/180/3600)

# 2015-11-18 16:41:39.937595
+2**-10/(2.5*340*_)

# 2015-11-18 16:43:11.959411
+tan(pi)

# 2015-11-18 16:43:18.398322
+tan(1)

# 2015-11-18 16:43:24.897715
+tan(60)

# 2015-11-18 16:43:32.643960
+sin(pi)

# 2015-11-18 16:43:51.124618
+help(tan)

# 2015-11-18 16:45:10.159429
+o

# 2015-11-18 16:45:16.485248
+tan(pi/180/3600)

# 2015-11-18 17:13:40.753086
+2**-10/(2.5*4.8*340*e-16)

# 2015-11-18 17:13:43.816209
+2**-10/(2.5*4.8*340e-16)

# 2015-11-18 19:01:00.022383
+tan(pi/180/3600)

# 2015-11-18 19:01:08.237787
+t = tan(pi/180/3600)

# 2015-11-18 19:01:19.437069
+2**-10/(2.5*t*340)

# 2015-11-18 19:02:46.990378
+(1/2**10)/(2.5*t*340)

# 2015-11-18 19:03:06.603469
+(1/2**8)/(2.5*t*340)

# 2015-11-18 19:03:35.517576
+(1/2**7)/(2.5*t*340)

# 2015-11-18 19:16:18.207006
+(1/2**7)/(2.3*t*340)

# 2015-11-18 19:25:05.828892
+tan(2*pi/180)

# 2015-11-18 19:26:02.838552
+10/_

# 2015-11-18 19:26:38.863533
+tan(0.75*pi/180)

# 2015-11-18 19:26:41.225134
+10/_

# 2015-11-18 19:27:12.039539
+130*tan(0.75*pi/180)

# 2015-11-18 19:29:40.330847
+t = tan(0.1*pi/180/3600)

# 2015-11-18 19:29:46.576433
+(1/2**7)/(2.3*t*340)

# 2015-11-18 19:30:02.121270
+t

# 2015-11-18 19:34:45.423772
+23*340

# 2015-11-18 19:37:38.605017
+2.3*340*2

# 2015-11-19 11:02:24.494652
+2**-10/1e-4

# 2015-11-19 11:03:14.689940
+2**-11/1e-4

# 2015-11-19 11:03:24.086756
+2**-13/1e-4

# 2015-11-19 16:40:44.277287
+from math import pi

# 2015-11-19 16:40:53.164631
+from math import tan

# 2015-11-19 16:40:59.933916
+t = tan(0.1*pi/180/3600)

# 2015-11-19 16:41:00.904005
+t

# 2015-11-19 16:50:24.505981
+from math import pi

# 2015-11-19 16:50:26.657000
+from math import tan

# 2015-11-19 16:50:36.255196
+t = tan(0.75*pi/180)

# 2015-11-19 16:50:37.290469
+t

# 2015-11-27 20:43:15.968126
+from libpinyin_wrapper import LibpinyinWrapper

# 2015-11-27 21:38:39.246246
+from libpinyin_wrapper.LibpinyinWrapper import LibpinyinWrapper

# 2015-11-27 21:38:53.652656
+LibpinyinWrapper(0)

# 2015-12-01 10:54:19.798921
+from math import tan,pi

# 2015-12-01 10:55:03.451981
+(692*tan(pi/180/3600)*2.3)*340

# 2015-12-01 10:55:18.733053
+tan(pi/180/3600)

# 2015-12-01 10:55:31.405422
+t = _

# 2015-12-01 10:55:33.504154
+t

# 2015-12-01 10:55:38.952911
+692*t

# 2015-12-01 10:57:55.028393
+9*2.3*340

# 2015-12-02 00:48:25.509156
+a = [1, 2, 3]

# 2015-12-02 00:48:28.615425
+b = []+a

# 2015-12-02 00:48:29.391402
+b

# 2015-12-02 00:48:56.116606
+a[0]=2

# 2015-12-02 00:48:56.937874
+b

# 2015-12-02 00:49:06.588909
+a = {1:2, 3:4}

# 2015-12-02 00:49:11.151717
+b = {}

# 2015-12-02 00:49:15.511639
+b.update(a)

# 2015-12-02 00:49:16.214290
+b

# 2015-12-02 00:49:21.757214
+a[1] = 3

# 2015-12-02 00:49:22.528428
+b

# 2015-12-02 00:50:59.544908
+a = [1, 2, 3]

# 2015-12-02 00:51:02.314572
+b = []

# 2015-12-02 00:51:34.741094
+for i in a:
+    b+=[i]*3

# 2015-12-02 00:51:36.025092
+b

# 2015-12-02 00:51:43.736771
+b[0] = 4

# 2015-12-02 00:51:44.942639
+b

# 2015-12-02 00:52:06.026159
+a = [0]*3

# 2015-12-02 00:52:06.700638
+a

# 2015-12-02 00:52:09.987877
+a[1] = 2

# 2015-12-02 00:52:10.528228
+a

# 2015-12-02 00:52:44.784536
+[i*3 for i in a]

# 2015-12-02 00:52:57.921806
+[[i]*3 for i in a]

# 2015-12-02 22:10:12.769871
+[map(lambda x:x**2, e) for e in [1, 2, 3]]

# 2015-12-03 00:10:06.268488
+%run -d ./squeal.py

# 2015-12-03 00:25:19.914937
+%run?

# 2015-12-03 00:25:36.098185
+%run -d -b177 ./squeal.py

# 2015-12-03 00:41:32.302405
+a = {1:2, 3:4}

# 2015-12-03 00:41:37.366067
+b = {}

# 2015-12-03 00:41:42.934797
+b.update(a)

# 2015-12-03 00:41:43.977752
+b

# 2015-12-03 00:41:49.800584
+a[1]= 4

# 2015-12-03 00:41:56.465313
+b

# 2015-12-03 00:42:00.372237
+a

# 2015-12-03 01:02:58.443584
+%run -d -b145 ./squeal.py

# 2015-12-03 01:05:31.023110
+%run -d -b131 ./squeal.py

# 2015-12-03 01:21:17.829755
+a = {1:[2, 4], 3:[6, 12]}

# 2015-12-03 01:21:21.271611
+b = {}

# 2015-12-06 02:11:23.488018
+with open("./olympics-results.csv") as f:
+    text_list = [[e.strip() for e in text.strip().split(',')] for text in f]

# 2015-12-06 02:11:29.859227
+text_list

# 2015-12-06 02:14:49.816284
+zip(*text_list)

# 2015-12-06 02:32:35.405002
+import csv

# 2015-12-06 02:43:04.195451
+src = []

# 2015-12-06 02:43:41.730600
+with open("./oscar-actor.csv") as f:
+    reader = csv.DictReader(f)
+    for row in reader:
+        src.appen(row)

# 2015-12-06 02:45:02.527778
+with open("./oscar-actor.csv", "rU") as f:
+    reader = csv.DictReader(f)
+    for row in reader:
+        src.appen(row)

# 2015-12-06 02:45:15.770307
+with open("./oscar-actor.csv", "rU") as f:
+    reader = csv.DictReader(f)
+    for row in reader:
+        src.append(row)

# 2015-12-06 02:45:20.306554
+rc

# 2015-12-06 02:45:21.745915
+src

# 2015-12-09 15:51:00.601861
+num = 0

# 2015-12-09 15:51:11.757106
+for i in range(100):
+    num += 0.1

# 2015-12-09 15:51:12.845676
+num

# 2015-12-09 15:51:21.621923
+num = 0.0

# 2015-12-09 15:51:27.866027
+for i in range(100):
+    num += 0.1

# 2015-12-09 15:51:29.849855
+num

# 2015-12-14 11:33:43.324296
+import lldb

# 2015-12-16 14:06:02.403182
+import example

# 2015-12-16 14:06:18.423134
+example.Example1

# 2015-12-16 14:06:21.843743
+example.Example1()

# 2015-12-16 14:06:31.660778
+example.Example1

# 2015-12-20 20:49:22.392517
+from PIL import Image

# 2015-12-21 01:14:43.641361
+import numpy as np

# 2015-12-21 01:15:09.244047
+a = np.array(range(100))

# 2015-12-21 01:15:17.835500
+a.reshape(10, -1)

# 2015-12-21 01:15:44.512259
+a = np.zeros((10,10))

# 2015-12-21 01:15:45.043397
+a

# 2015-12-21 01:16:14.855308
+a = np.zeros((10,10), dtype=np.uint8)

# 2015-12-21 01:16:16.039414
+a

# 2015-12-21 01:16:30.513795
+im = Image.fromarray(a)

# 2015-12-21 01:16:34.621568
+im.show()

# 2015-12-21 01:17:36.562157
+from scipy import misc

# 2015-12-21 01:17:58.112151
+misc.save("test.bmp", a)

# 2015-12-21 01:18:14.478743
+misc.imsave("test.bmp", a)

# 2015-12-21 01:18:28.058386
+misc.imsave("/home/skt/tmp/test.bmp", a)

# 2015-12-22 01:02:14.681356
+import numpy as np

# 2015-12-23 13:06:53.608327
+import cv2

# 2015-12-23 13:07:51.937286
+src = cv2.imread('./plan12DA.png', cv2.cv.CV_LOAD_IMAGE_GRAYSCALE)

# 2015-12-23 13:07:56.260762
+src.shape

# 2015-12-23 13:09:15.078606
+cv2.findContours(src, mode=cv2.cv.CV_RETR_LIST, method=cv2.cv.CV_CHAIN_APPROX_NONE)

# 2015-12-23 13:09:50.154325
+result = _

# 2015-12-23 13:10:02.167690
+result[0]

# 2015-12-23 13:10:05.551192
+result[0][0]

# 2015-12-23 13:11:02.303270
+result[0][2]

# 2015-12-23 13:13:30.792147
+import numpy as np

# 2015-12-23 13:15:01.223620
+for edge in result[0]:
+    w = np.zeros_like(src)
+    cv2.drawContours(w, edge, 0, 255)

# 2015-12-23 13:16:09.443800
+for n,edge in enumerate(result[0][:1000]):
+    w = np.zeros_like(src)
+    cv2.drawContours(w, edge, 0, 255)
+    cv2.imwrite("{}.jpg".format(n), w)

# 2015-12-23 13:22:24.180996
+import cv2

# 2015-12-23 13:25:33.315437
+w1 = cv2.imread('1.jpg')

# 2015-12-23 13:25:37.757915
+w1.any()

# 2015-12-23 13:25:47.310954
+w1.argmax()

# 2015-12-23 13:26:12.712795
+import numpy as np

# 2015-12-23 13:26:20.096905
+np.argmax?

# 2015-12-23 13:26:55.446271
+w2 = cv2.imread('2.jpg')

# 2015-12-23 13:26:59.262385
+w2.argmax()

# 2015-12-23 13:41:14.780467
+w2.max()

# 2015-12-23 17:52:11.770608
+import cv2

# 2015-12-23 17:52:20.862829
+import numpy as np

# 2015-12-23 17:52:33.012064
+w = np.zeros((400*400))

# 2015-12-23 17:52:35.343493
+w.shape

# 2015-12-23 17:52:46.331002
+w.reshape(400)

# 2015-12-23 17:52:49.818274
+w.reshape(400,-1)

# 2015-12-23 17:52:53.370945
+w.shape

# 2015-12-23 17:53:03.179522
+w = w.reshape(400,-1)

# 2015-12-23 17:53:09.286635
+w.shape

# 2015-12-23 17:53:55.954555
+cv2.rectangle(w, (100,100), (200,200), 255, thickness=-1)

# 2015-12-23 17:54:02.259958
+cv2.imshow(w)

# 2015-12-23 17:54:10.859900
+cv2.imshow("dispaly",w)

# 2015-12-23 17:54:16.397929
+cv2.waitKey(-1)

# 2015-12-23 17:54:41.817594
+result = cv2.findContours(w, mode=cv2.cv.CV_RETR_LIST, method=cv2.cv.CV_CHAIN_APPROX_NONE)

# 2015-12-23 17:55:07.500343
+w = w.astype(np.uint8)

# 2015-12-23 17:55:10.976504
+w

# 2015-12-23 17:55:14.023777
+result = cv2.findContours(w, mode=cv2.cv.CV_RETR_LIST, method=cv2.cv.CV_CHAIN_APPROX_NONE)

# 2015-12-23 17:55:16.376294
+result

# 2015-12-27 00:03:59.559394
+import linecache

# 2015-12-27 00:04:02.889787
+linecache.getline

# 2015-12-27 00:04:04.639051
+linecache.getline?

# 2015-12-27 00:04:06.471683
+linecache.getline??

# 2015-12-27 00:04:33.949502
+linecache.getlines??

# 2015-12-27 21:53:56.302268
+import gdb

# 2015-12-28 16:15:56.687037
+import serial

# 2015-12-28 16:16:39.391861
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-12-28 16:16:46.974987
+s.read(10)

# 2015-12-28 16:29:49.568034
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2015-12-28 16:30:26.772396
+s = serial.Serial("/dev/ttyUSB1", 115200)

# 2015-12-28 16:30:44.400900
+s.read(10)

# 2015-12-29 01:50:03.375497
+import sub

# 2015-12-29 01:50:08.061455
+import subprocess

# 2015-12-29 01:51:42.145622
+p = subprocess.Popen(args = ['gdb', 'hello'],
+        stdin = subprocess.PIPE, stdout = subprocess.PIPE,
+        close_fds = True)

# 2015-12-29 01:51:55.634274
+import fcntl

# 2015-12-29 01:52:16.219095
+fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)

# 2015-12-29 01:52:54.237377
+import os
+fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl|os.O_NONBLOCK)

# 2015-12-29 01:53:54.518577
+p.stdout.read()

# 2015-12-29 01:54:51.620229
+p.stdin.write('dashboard -outout /dev/pts/6\n')

# 2015-12-29 01:55:01.620137
+p.stdin.write(b'dashboard -outout /dev/pts/6\n')

# 2015-12-29 01:55:11.312856
+p.stdout.read()

# 2015-12-29 01:55:31.754425
+p.stdin.write(b'b main\n')

# 2015-12-29 01:55:38.636678
+p.stdout.read()

# 2015-12-29 01:55:54.033753
+p.stdin.write(b'run\n')

# 2015-12-29 01:56:36.262642
+p.stdin.write(b'help\n')

# 2015-12-29 01:56:39.928529
+p.stdout.read()

# 2015-12-29 01:56:59.043398
+p.terminate()

# 2015-12-29 01:58:01.448440
+p.send_signal(9)

# 2015-12-29 01:58:36.876953
+import subprocess

# 2015-12-29 01:58:50.452193
+import fcntl

# 2015-12-29 01:58:53.989207
+import os

# 2015-12-29 01:59:32.515032
+p = subprocess.Popen(args = ['gdb', 'hello'],
+        stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE,
+        close_fds = True)

# 2015-12-29 01:59:55.179511
+p

# 2015-12-29 02:00:04.601702
+fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)

# 2015-12-29 02:01:12.664538
+fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl|os.O_NONBLOCK)

# 2015-12-29 02:02:37.748074
+fl

# 2015-12-29 02:03:15.402935
+p.stdout.read()

# 2015-12-29 02:03:35.849132
+p.stderr.readable()

# 2015-12-29 02:03:40.953583
+p.stderr.read()

# 2015-12-29 02:04:04.012955
+p.stderr.readline()

# 2015-12-29 02:05:50.162439
+p.stdin.write(b'help\n')

# 2015-12-29 02:05:54.381966
+p.stdout.read()

# 2015-12-29 02:06:09.634653
+p.stderr.read()

# 2015-12-29 02:06:58.397930
+p.stdin.write(b'help\n')

# 2015-12-29 02:07:01.714023
+p.stderr.read()

# 2015-12-29 02:07:06.710516
+p.stdout.read()

# 2015-12-29 02:09:11.094995
+import subprocess

# 2015-12-29 02:09:14.754009
+import os

# 2015-12-29 02:09:18.636142
+import fcntl

# 2015-12-29 02:12:30.457949
+p = subprocess.Popen(bufsize = 0,
+    args = [gdb,
+            '--return-child-result',
+            '--quiet', # inhibit dumping info at start-up
+            '--nx', # inhibit window interface
+            '--nw', # ignore .gdbinit
+            '--interpreter=mi2', # use GDB/MI v2
+            #'--write', # to-do: allow to modify executable/cores?
+            'hello'],
+    stdin = subprocess.PIPE, stdout = subprocess.PIPE,
+    close_fds = True
+    )

# 2015-12-29 02:12:57.556059
+p = subprocess.Popen(bufsize = 0,
+    args = ['gdb',
+            '--return-child-result',
+            '--quiet', # inhibit dumping info at start-up
+            '--nx', # inhibit window interface
+            '--nw', # ignore .gdbinit
+            '--interpreter=mi2', # use GDB/MI v2
+            #'--write', # to-do: allow to modify executable/cores?
+            'hello'],
+    stdin = subprocess.PIPE, stdout = subprocess.PIPE,
+    close_fds = True
+    )

# 2015-12-29 02:13:35.334537
+fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)

# 2015-12-29 02:13:39.330555
+fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl|os.O_NONBLOCK)

# 2015-12-29 02:13:44.966062
+fl

# 2015-12-29 02:14:04.283053
+p.stdout.read()

# 2015-12-29 02:14:27.802831
+p.stdin.write(b'-break-insert main\n')

# 2015-12-29 02:14:34.431411
+p.stdout.read()

# 2015-12-29 02:15:12.600320
+p.stdout.write(b'-exec-run\n')

# 2015-12-29 02:15:24.181681
+p.stdin.write(b'-exec-run\n')

# 2015-12-29 02:15:36.907353
+p.stdout.read()

# 2015-12-29 02:15:53.287159
+o = _

# 2015-12-29 02:15:56.498912
+print(o)

# 2015-12-29 02:16:20.445147
+print(str(o))

# 2015-12-29 02:16:31.696722
+type(o)

# 2015-12-29 02:16:58.453394
+p.stdout.read()

# 2015-12-29 02:17:10.316247
+p.stderr.read()

# 2016-01-03 14:03:34.944095
+a = '\n'

# 2016-01-03 14:03:37.600221
+a.strip()

# 2016-01-03 14:20:26.209069
+'sss'.partition('*')

# 2016-01-03 21:05:04.504188
+%pdb

# 2016-01-03 21:05:14.632317
+%run main.py a.out

# 2016-01-03 21:13:13.788019
+import logging

# 2016-01-03 21:13:24.986597
+root = logging.getLogger()

# 2016-01-03 21:13:31.576336
+root.handlers

# 2016-01-03 21:13:47.457020
+root.removeHandler(root.handlers[0])

# 2016-01-03 21:15:29.114313
+%run main.py a.out

# 2016-01-03 21:33:03.353505
+import re

# 2016-01-03 21:33:13.021696
+s = re.compile('\d+')

# 2016-01-03 21:33:17.720723
+a = '0000a'

# 2016-01-03 21:33:25.938190
+s.match(a)

# 2016-01-03 21:33:30.208712
+m = _

# 2016-01-03 21:33:38.473203
+m.pos

# 2016-01-03 21:33:43.866951
+m.endpos

# 2016-01-03 21:33:52.400810
+a[0:5]

# 2016-01-03 21:34:11.753671
+a = '0000abbbbb'

# 2016-01-03 21:34:27.536994
+m = s.match(a)

# 2016-01-03 21:34:32.028923
+m.pos

# 2016-01-03 21:34:35.371417
+m.endpo

# 2016-01-03 21:34:39.704547
+m.endpos

# 2016-01-03 21:34:44.062150
+m.end

# 2016-01-03 21:34:47.456563
+m.end()

# 2016-01-03 21:35:00.137597
+m.expand

# 2016-01-03 21:35:05.240650
+m.expand()

# 2016-01-03 21:35:13.264633
+m.e

# 2016-01-03 21:35:23.192846
+m.expand?

# 2016-01-03 21:35:43.002454
+m.expand('w')

# 2016-01-03 21:36:30.322415
+m.group(0)

# 2016-01-03 21:37:11.952598
+m.start()

# 2016-01-03 21:37:24.088767
+b = 'aaaaa'

# 2016-01-03 21:37:37.817272
+s.match(b)

# 2016-01-03 22:05:32.266479
+import logging

# 2016-01-03 22:05:45.706716
+root = logging.getLogger()

# 2016-01-03 22:05:54.587740
+root.removeHandler(root.handlers[0])

# 2016-01-03 22:05:58.901036
+%run main.py a.out

# 2016-01-03 22:07:39.666597
+import logging

# 2016-01-03 22:07:47.586667
+root = logging.getLogger()

# 2016-01-03 22:07:56.275055
+root.removeHandler(root.handlers[0])

# 2016-01-03 22:08:06.047534
+%run main.py a.out

# 2016-01-03 22:08:23.474040
+m.start()

# 2016-01-03 22:08:37.536926
+c = '0000aaaaa88888'

# 2016-01-03 22:08:41.098413
+s.match(c)

# 2016-01-03 22:08:45.282184
+m = _

# 2016-01-03 22:08:49.450094
+m.start()

# 2016-01-03 22:08:54.740314
+m.end()

# 2016-01-03 22:09:09.803168
+%pdb

# 2016-01-03 22:09:13.125133
+%run main.py a.out

# 2016-01-03 22:09:57.755035
+%reload_ext

# 2016-01-03 22:10:05.467480
+%reload_ext?

# 2016-01-03 22:10:31.659412
+%run ?

# 2016-01-03 22:10:38.034359
+%run?

# 2016-01-03 22:12:02.010668
+%autoreload

# 2016-01-03 22:12:51.442976
+%load_ext autoreload

# 2016-01-03 22:12:58.882478
+%autoreload?

# 2016-01-03 22:13:09.782158
+%autoreload 2

# 2016-01-03 22:13:19.317176
+%run main.py a.out

# 2016-01-05 09:30:21.730761
+import re

# 2016-01-05 09:30:31.341905
+re.compile('\d+', re.DEBUG)

# 2016-01-05 09:31:11.982722
+re.compile('\d*', re.DEBUG)

# 2016-01-08 10:46:40.928042
+import cv2

# 2016-01-08 10:46:53.152715
+mat = cv2.imread('./CGH_map.png', 0)

# 2016-01-08 10:47:14.030391
+import cv2

# 2016-01-08 10:47:16.115059
+mat = cv2.imread('./CGH_map.png', 1)

# 2016-01-08 11:16:35.742370
+import cv2

# 2016-01-08 11:17:36.487960
+cv2.imread('./CGH_map.png', 0)

# 2016-01-08 15:31:21.422148
+import gdbmi_interface

# 2016-01-08 15:37:42.513747
+import gdbmi_plugin

# 2016-01-14 12:12:26.443366
+def a():
+    for e in range(10):
+        yield e
+        return

# 2016-01-14 12:12:37.464049
+for w in a():
+    print(w)

# 2016-01-14 12:12:54.067883
+def a():
+    for e in range(10):
+        yield e
+        return

# 2016-01-14 12:12:56.348677
+for w in a():
+    print(w)

# 2016-01-14 13:02:15.456359
+%pdb

# 2016-01-14 13:02:22.767001
+%run test.py

# 2016-01-14 14:21:39.052450
+import asyncop

# 2016-01-14 14:21:42.877197
+import asyncio

# 2016-01-14 14:21:50.177385
+loop = asyncio.get_event_loop()

# 2016-01-14 21:03:41.427074
+a = {1:[2, 4], 3:[6, 12]}

# 2016-01-14 21:03:43.605813
+set(a)

# 2016-01-18 00:43:35.095274
+from math import tan,pi

# 2016-01-18 00:43:40.262641
+tan(pi/180/3600)

# 2016-01-18 00:44:10.963779
+tan(0.75*pi/180)

# 2016-01-18 00:44:21.877869
+a = tan(pi/180/3600)

# 2016-01-18 00:44:26.889307
+b = tan(0.75*pi/180)

# 2016-01-18 00:44:28.618845
+b/a

# 2016-01-18 00:44:42.694719
+2700*2.27e-6

# 2016-01-19 10:36:48.012215
+def func1():
+    func1.x = 100
+    def func2():
+        func1.x = 200
+    func2()
+    print(func1.x)

# 2016-01-19 10:36:51.106422
+func1()

# 2016-01-19 22:11:53.153832
+import pypandoc

# 2016-01-19 22:12:00.609184
+pypandoc.convert

# 2016-01-19 22:12:02.450625
+pypandoc.convert?

# 2016-01-24 20:25:30.762513
+import cProfile

# 2016-01-24 21:25:34.760792
+%pdb

# 2016-01-24 21:25:43.603298
+%run test.py

# 2016-01-24 21:40:50.425900
+a = [1, 2, 3]

# 2016-01-24 21:40:56.144175
+import numpy as np

# 2016-01-24 21:41:01.606570
+np.where(a>1)

# 2016-01-24 21:41:24.931999
+a = np.array(a)

# 2016-01-24 21:41:25.323549
+a

# 2016-01-24 21:41:28.003955
+np.where(a>1)

# 2016-01-24 21:42:32.221753
+np.where(a>1)[0]

# 2016-01-24 21:42:46.070987
+np.where(a>1)[0][0]

# 2016-01-24 21:45:20.528384
+%run

# 2016-01-24 21:45:30.087768
+%pdb

# 2016-01-24 21:45:35.319738
+%run test.py

# 2016-01-25 18:55:05.995545
+import numpy as np

# 2016-01-25 18:55:15.588437
+np.zeros((2,2), np.float)

# 2016-01-25 18:55:19.588250
+a = _

# 2016-01-25 18:55:24.738242
+a[0][0]= 1

# 2016-01-25 18:55:25.610337
+a

# 2016-01-25 18:57:00.875642
+a.max(axis=0)

# 2016-01-25 18:57:11.257926
+a/_

# 2016-01-25 18:57:34.509669
+a/1

# 2016-01-25 18:57:40.005669
+a-1

# 2016-01-25 18:58:33.763175
+a 

# 2016-01-25 18:58:45.123588
+b = np.array((1,1))

# 2016-01-25 18:58:46.412698
+a/b

# 2016-01-25 18:58:51.212950
+a/b?

# 2016-01-25 18:59:52.775188
+a[0][1] = 2

# 2016-01-25 19:00:00.184529
+b = np.array((2,2))

# 2016-01-25 19:00:06.652310
+%pwd

# 2016-01-25 19:00:10.874156
+a/b

# 2016-01-25 19:00:17.546775
+a

# 2016-01-25 19:00:21.817527
+b = np.array((2,3))

# 2016-01-25 19:00:23.084871
+a/b

# 2016-01-25 19:05:30.354704
+%cd

# 2016-01-25 19:05:40.651088
+a[0][1] = 2

# 2016-01-25 19:19:58.591452
+%pwd

# 2016-01-25 19:20:02.099237
+%pdb

# 2016-01-25 19:20:08.323767
+%run test.py

# 2016-01-25 19:26:56.688585
+np.corrcoef(np.array((0,0,0)), np.array(0,0,0))

# 2016-01-25 19:27:11.877165
+np.corrcoef?

# 2016-01-25 19:28:34.997223
+%run test.py

# 2016-01-25 19:50:34.228872
+%pdb

# 2016-01-25 19:50:37.412783
+%run test.py

# 2016-01-25 19:52:44.042277
+a = np.array((1,2))

# 2016-01-25 19:52:56.106495
+a = np.array([[1], [2]])

# 2016-01-25 19:52:58.255126
+a = np.array((1,2))

# 2016-01-25 19:53:02.617112
+b = np.array([[1], [2]])

# 2016-01-25 19:53:04.029012
+a*b

# 2016-01-25 19:53:08.052741
+b*a

# 2016-01-25 19:53:20.316249
+a@b

# 2016-01-25 19:53:23.547114
+b@a

# 2016-01-25 19:53:44.522087
+a

# 2016-01-25 19:53:45.637811
+b

# 2016-01-25 19:54:50.925597
+a.__mul__?

# 2016-01-25 19:55:15.239748
+%run test.py

# 2016-01-25 19:56:35.053945
+a = np.array([[1,2], [3, 4]])
+b = np.array([[1,2], [3, 4]])

# 2016-01-25 19:56:40.174188
+a*b

# 2016-01-25 19:56:47.533478
+a@b

# 2016-01-25 19:58:48.566091
+a[0][1]

# 2016-01-27 01:45:36.660695
+import numpy as np

# 2016-01-27 01:45:43.475390
+np.zeros((2,2))

# 2016-01-27 01:45:50.921023
+a = _

# 2016-01-27 01:45:55.048482
+a.dtype

# 2016-02-06 13:34:41.960940
+import misaka

# 2016-02-08 21:26:04.620617
+import serial

# 2016-02-08 21:26:34.614709
+s = serial.Serial("/dev/ttyUSB0", 115200)

# 2016-02-08 21:26:42.362457
+s.open()

# 2016-02-08 21:26:53.723548
+s.write(b'c')

# 2016-02-08 21:31:18.444801
+s.read(1)

# 2016-02-08 21:31:25.618159
+s.read(10)

# 2016-02-08 21:31:29.821730
+s.read()

# 2016-02-08 21:31:43.158745
+s.readlines()

# 2016-02-08 21:31:53.732835
+s.readline()

# 2016-02-08 21:32:00.057541
+s.read()

# 2016-02-08 21:32:05.584790
+s.write(b'c')

# 2016-02-08 21:32:07.429474
+s.read()

# 2016-02-15 15:50:08.119929
+import serial

# 2016-02-15 15:50:18.217033
+s = serial.Serial("/dev/ttyUSB0", 9600)

# 2016-02-15 15:50:22.478649
+s.read(10)

# 2016-02-15 15:52:40.092077
+s.read(1)

# 2016-02-15 15:52:50.928375
+s.read?

# 2016-02-15 15:54:59.341022
+s = serial.Serial("/dev/ttyUSB0", 9600, timeout=1)

# 2016-02-15 15:55:08.869357
+s.read(1)

# 2016-02-15 16:12:13.388361
+while 1:s.read(1)

# 2016-02-15 16:12:37.103569
+s.read(1)

# 2016-02-15 16:12:52.253036
+k

# 2016-02-15 16:12:56.984254
+s.read(1)

# 2016-02-15 16:13:22.421110
+while 1:
+    print(s.read(1))
+    

# 2016-02-15 16:24:37.225615
+serial.tools.list_ports

# 2016-02-15 16:25:01.855251
+serial.sys

# 2016-02-15 16:25:42.173300
+import serial.tools

# 2016-02-15 16:26:07.844703
+from serial import tools

# 2016-02-15 16:26:14.374548
+tools

# 2016-02-15 16:26:21.401272
+tools.list_ports

# 2016-02-15 16:27:14.713307
+from serial.tools import list_ports

# 2016-02-15 16:27:19.351989
+list_ports.main()

# 2016-02-15 16:32:40.214932
+s.close()

# 2016-02-28 13:29:59.933333
+tools

# 2016-02-29 16:20:52.251004
+import ctags

# 2016-02-29 16:22:45.569032
+from ctags import CTags, TagEntry

# 2016-02-29 16:22:56.060821
+tagfile = CTags('tags')

# 2016-02-29 16:23:05.252877
+tagfile

# 2016-02-29 16:23:18.725594
+tagfile['name']

# 2016-02-29 16:23:53.569084
+entry = TagEntry()

# 2016-02-29 16:23:55.323851
+entry

# 2016-02-29 16:25:01.114861
+tagfile.find(entry, 'find')

# 2016-02-29 16:25:32.366125
+tagfile.find(entry, 'find', ctags.TAG_PARTIALMATCH)

# 2016-02-29 16:25:52.836321
+tagfile.find(entry, 'line', ctags.TAG_PARTIALMATCH)

# 2016-02-29 16:26:21.173493
+tagfile.find(entry, 'main', ctags.TAG_PARTIALMATCH)

# 2016-02-29 16:26:35.007693
+entry['lineNumber']

# 2016-02-29 16:27:10.154171
+entry['pattern']

# 2016-02-29 16:27:27.116293
+entry['kind']

# 2016-02-29 16:27:50.873420
+entry['filename']

# 2016-02-29 16:27:53.498556
+entry

# 2016-02-29 16:27:57.740130
+print(entry)

# 2016-02-29 16:40:46.166466
+entry['file']

# 2016-02-29 17:01:26.899353
+import os.path

# 2016-02-29 17:01:36.615356
+os.path.abspath('tags')

# 2016-02-29 19:21:55.966281
+import ctags

# 2016-02-29 19:22:06.467541
+from ctags import CTags, TagEntry

# 2016-02-29 19:22:17.347515
+CTags('tags')

# 2016-02-29 19:22:49.576266
+import ctags

# 2016-03-01 15:36:09.732541
+import glob

# 2016-03-01 15:36:17.772219
+glob.escape("'")

# 2016-03-01 15:36:25.575496
+glob.escape("[")

# 2016-03-01 15:36:47.606208
+glob.escape("*")

# 2016-03-01 15:40:31.971311
+import re

# 2016-03-01 15:40:37.802000
+re.escape('"')

# 2016-03-04 15:37:53.839866
+import os

# 2016-03-04 15:38:11.800558
+fd = os.open("test.txt", "wt")

# 2016-03-04 15:38:28.084430
+fd = os.open("test.txt")

# 2016-03-04 15:38:47.663308
+fd = os.open("test.txt", os.O_WRONLY)

# 2016-03-04 15:39:04.603685
+fd = os.open("test.txt", os.O_WRONLY|os.O_CREAT)

# 2016-03-04 15:39:09.072869
+open(fd)

# 2016-03-04 15:39:13.584629
+fd

# 2016-03-04 15:39:25.152647
+open("test.txt")

# 2016-03-04 15:42:24.617135
+import os

# 2016-03-04 15:42:31.704303
+os.unlink("test")

# 2016-03-04 15:48:46.722579
+import subprocess

# 2016-03-04 15:49:13.777731
+subprocess.run(["ls", "-l"], shell=True)

# 2016-03-04 15:49:33.182151
+subprocess.run(["ls", "-al"], shell=True)

# 2016-03-04 15:49:48.642259
+subprocess.run(["ls", "-l"], shell=True)

# 2016-03-04 15:50:02.443946
+subprocess.run(["ls -l"], shell=True)

# 2016-03-04 15:50:37.824929
+subprocess.run(["ls", "-l"], shell=True)

# 2016-03-04 15:50:52.425644
+subprocess.run(["ls", "-l"],stdout=subprocess.PIPE, shell=True)

# 2016-03-04 15:51:46.397264
+subprocess.run(["mpv", "/home/skt/sdb3/0.mp4"], shell=True)

# 2016-03-04 15:53:26.079329
+subprocess.run(["mpv /home/skt/sdb3/0.mp4"], shell=True)

# 2016-03-04 15:54:06.021829
+subprocess.run?

# 2016-03-04 15:54:40.205479
+subprocess.run("mpv /home/skt/sdb3/0.mp4", shell=True)

# 2016-03-04 16:12:52.081834
+%cd tmp

# 2016-03-04 16:14:09.484051
+subprocess.run(["python", "test.py"], shell=True)

# 2016-03-04 16:14:34.919708
+subprocess.run(["python", "test.py"], stdout=subprocess.PIPE)

# 2016-03-04 16:15:29.661325
+import subprocess

# 2016-03-04 16:15:45.710519
+subprocess.run(["python"], shell=True)

# 2016-03-04 21:48:17.419756
+import os

# 2016-03-04 21:48:32.860366
+os.getenv('JAVA_HOME')

# 2016-03-04 21:55:29.314142
+import sys

# 2016-03-04 21:56:18.004060
+sys.path.append("/home/skt/tmp/spark-1.6.0-bin-hadoop2.4/python/lib")

# 2016-03-04 21:56:22.997973
+import pyspark

# 2016-03-04 21:57:54.831132
+sys.path

# 2016-03-04 21:58:06.644472
+import pyspark

# 2016-03-04 22:01:27.440656
+sys.path.append("/home/skt/tmp/spark-1.6.0-bin-hadoop2.4/python/lib/pyspark.zip")

# 2016-03-04 22:01:33.531741
+sys.path.append("/home/skt/tmp/spark-1.6.0-bin-hadoop2.4/python/lib/py4j-0.9-src.zip")

# 2016-03-04 22:01:37.179850
+import pyspark

# 2016-03-08 11:16:10.188934
+import json

# 2016-03-08 11:16:55.439477
+json.loads('number="1",type="breakpoint",disp="keep",enabled="y",addr="0x000000000040054e",func="main",file="test.c",fullname="/home/skt/code/python-gdb-mi/test.c",line="5",thread-groups=["i1"],times="0",original-location="main"')

# 2016-03-08 11:19:13.748130
+json.loads('{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x000000000040054e",func="main",file="test.c",fullname="/home/skt/code/python-gdb-mi/test.c",line="5",thread-groups=["i1"],times="0",original-location="main"}')

# 2016-03-08 13:08:12.779203
+eval('dkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x000000000040054e",func="main",file="test.c",fullname="/home/skt/code/python-gdb-mi/test.c",line="5",thread-groups=["i1"],times="0",original-location="main"}')

# 2016-03-08 13:08:51.671640
+eval('{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x000000000040054e",func="main",file="test.c",fullname="/home/skt/code/python-gdb-mi/test.c",line="5",thread-groups=["i1"],times="0",original-location="main"}')

# 2016-03-08 13:25:43.684406
+import parse

# 2016-03-08 13:25:54.598443
+p = parse.parser

# 2016-03-08 13:26:04.500616
+p.parse('2+-')

# 2016-03-08 13:26:18.565367
+p.parse('2')

# 2016-03-08 13:26:27.357430
+p.parse('2+-')

# 2016-03-08 13:26:30.274506
+_

# 2016-03-08 13:26:43.851260
+print(p.parse('2+=-'))

# 2016-03-08 13:26:49.203866
+print(p.parse('2+-'))

# 2016-03-08 13:26:59.717865
+print(None)

# 2016-03-08 14:11:53.368036
+import ree

# 2016-03-08 14:11:55.758311
+import re

# 2016-03-08 14:12:28.886915
+re.match(r'(done)|(running)', 'done')

# 2016-03-08 14:12:41.573748
+re.match(r'(done)|(running)', 'running')

# 2016-03-08 14:23:57.111057
+re.match(r'done|running', 'running')

# 2016-03-08 14:26:14.095225
+re.match(r'\".*\"', '"/usr/lib/libc.so.6"')

# 2016-03-08 14:35:13.202264
+re.match(r'\w', '"/usr/lib/libc.so.6"')

# 2016-03-08 14:35:37.610915
+re.match(r'\w', 'wwkjio')

# 2016-03-08 14:35:44.958743
+re.match(r'\w+', 'wwkjio')

# 2016-03-08 14:35:51.672495
+re.match(r'\w+', '0wwkjio')

# 2016-03-08 14:37:53.349725
+re.match(r'\"(.*?)\"', '"/usr/lib/libc".so."6"')

# 2016-03-08 14:38:06.626718
+_.group(0)

# 2016-03-10 19:20:48.827370
+import os

# 2016-03-10 19:21:53.019038
+def a():
+    for e in os.walk('.'):
+        yield e

# 2016-03-10 19:22:04.285201
+f = next(a)

# 2016-03-10 19:22:14.479899
+c = iter(a)

# 2016-03-10 19:22:21.760519
+a

# 2016-03-10 19:22:29.427383
+def a():
+    for e in os.walk('.'):
+        yield e

# 2016-03-10 19:22:33.690733
+a

# 2016-03-10 19:22:53.501404
+for f in a:
+    pass

# 2016-03-10 19:23:13.723506
+a = os.walk('.')

# 2016-03-10 19:23:14.320207
+a

# 2016-03-10 19:23:27.902069
+f = next(a)

# 2016-03-10 19:23:30.615041
+f

# 2016-03-10 19:23:53.107777
+f[3]

# 2016-03-10 19:24:00.561930
+f[2]

# 2016-03-12 18:44:41.529203
+import serial

# 2016-03-12 18:44:51.832182
+serial.Serial.inWaiting?

# 2016-03-12 18:44:56.779026
+serial.Serial.inWaiting??

# 2016-03-12 18:45:17.418589
+serial.Serial.in_waiting?

# 2016-03-12 18:45:19.604919
+serial.Serial.in_waiting??

# 2016-03-13 14:37:21.397897
+import pygame

# 2016-03-13 14:44:38.650232
+import pygamme

# 2016-03-13 14:44:43.163083
+import pygame

# 2016-03-13 14:44:47.973532
+pygame.display.init()

# 2016-03-15 00:30:10.030869
+import pygame

# 2016-03-15 00:30:18.605974
+import pygame,os

# 2016-03-15 00:30:34.914680
+os.putenv('SDL_VIDEODRIVER', 'directfb')

# 2016-03-15 00:30:40.337570
+pygame.display.init()

# 2016-03-15 00:31:04.938904
+os.putenv('SDL_VIDEODRIVER', 'x11')

# 2016-03-15 00:31:09.567043
+pygame.display.init()

# 2016-03-15 00:31:24.670195
+window = pygame.display.set_mode((200, 200))

# 2016-03-15 18:39:21.690415
+import usb.core

# 2016-03-15 18:39:26.232092
+import usb.util

# 2016-03-15 18:39:31.923349
+dev = usb.core.find()

# 2016-03-15 18:39:33.504507
+dev

# 2016-03-15 18:40:02.814114
+dev.set_configuration()

# 2016-03-15 18:40:13.692004
+dev.serial_number()

# 2016-03-15 18:40:15.210434
+dev.serial_number

# 2016-03-15 18:40:52.974899
+dev = usb.core.find(idVendor=0x0bda)

# 2016-03-15 18:40:54.648198
+dev

# 2016-03-15 18:41:07.652422
+dev.serial_number

# 2016-03-15 18:41:28.299086
+dev.bDescriptorType

# 2016-03-15 18:41:35.049916
+dev.bDeviceSubClass

# 2016-03-15 18:41:44.536014
+dev.configurations

# 2016-03-15 18:41:50.554618
+dev.set_configuration

# 2016-03-15 18:41:52.813023
+dev.set_configuration()

# 2016-03-15 18:41:55.428264
+dev.configurations()

# 2016-03-15 18:42:19.658113
+conf = _

# 2016-03-15 18:42:22.384766
+conf.count

# 2016-03-15 18:42:24.076152
+conf.count()

# 2016-03-15 18:42:38.971510
+type(conf)

# 2016-03-15 18:42:42.699684
+conf

# 2016-03-15 18:42:49.927483
+conf = conf[0]

# 2016-03-15 18:42:51.868373
+conf

# 2016-03-15 18:42:57.369493
+type(conf)

# 2016-03-15 18:43:05.543082
+conf.bMaxPower

# 2016-03-15 18:43:09.430600
+conf.bLength

# 2016-03-15 18:43:17.774398
+conf.bmAttributes

# 2016-03-15 18:43:23.569418
+conf.index

# 2016-03-15 18:43:30.753101
+conf.extra_descriptors

# 2016-03-15 18:43:47.660193
+conf.bNumInterfaces

# 2016-03-15 18:43:53.208741
+conf.iConfiguration

# 2016-03-15 18:43:58.636001
+conf.wTotalLength

# 2016-03-15 18:44:57.644984
+dev = usb.core.find(idVendor=0x0951)

# 2016-03-15 18:44:59.261496
+dev

# 2016-03-15 18:45:03.697755
+dev.serial_number()

# 2016-03-15 18:45:42.578691
+
+conf = dev.get_active_configuration()

# 2016-03-16 14:52:19.436583
+import uinput

# 2016-03-16 15:06:32.572376
+def append_ev(ev_type, ev_name):
+    with open("/usr/include/linux/input.h") as f:
+        with open("src/ev.py", "a") as f2:
+            for line in f:
+                match = re.match(r"^#define (" + ev_name + "_.*)\t+((?:0x[0-9a-f]+)|(?:\d+))", line)
+                if match:
+                    print("%s = (%s, %s)" % (match.group(1).strip(), ev_type, match.group(2).strip()), file=f2)

# 2016-03-16 15:06:58.585097
+append_ev("0x01", "KEY")
+append_ev("0x01", "BTN")
+append_ev("0x02", "REL")
+append_ev("0x03", "ABS")

# 2016-03-16 15:07:24.099587
+def append_ev(ev_type, ev_name):
+    with open("/usr/include/linux/input.h") as f:
+        with open("ev.py", "a") as f2:
+            for line in f:
+                match = re.match(r"^#define (" + ev_name + "_.*)\t+((?:0x[0-9a-f]+)|(?:\d+))", line)
+                if match:
+                    print("%s = (%s, %s)" % (match.group(1).strip(), ev_type, match.group(2).strip()), file=f2)

# 2016-03-16 15:07:28.068162
+append_ev("0x01", "KEY")
+append_ev("0x01", "BTN")
+append_ev("0x02", "REL")
+append_ev("0x03", "ABS")

# 2016-03-16 15:07:33.164218
+import re

# 2016-03-16 15:07:36.365732
+append_ev("0x01", "KEY")
+append_ev("0x01", "BTN")
+append_ev("0x02", "REL")
+append_ev("0x03", "ABS")

# 2016-03-16 15:07:59.130564
+import re

# 2016-03-16 15:08:19.476610
+def append_ev(ev_type, ev_name):
+    with open("/usr/include/linux/input-event-codes.h") as f:
+        with open("ev.py", "a") as f2:
+            for line in f:
+                match = re.match(r"^#define (" + ev_name + "_.*)\t+((?:0x[0-9a-f]+)|(?:\d+))", line)
+                if match:
+                    print("%s = (%s, %s)" % (match.group(1).strip(), ev_type, match.group(2).strip()), file=f2)

# 2016-03-16 15:08:24.266118
+append_ev("0x01", "KEY")
+append_ev("0x01", "BTN")
+append_ev("0x02", "REL")
+append_ev("0x03", "ABS")

# 2016-03-16 21:57:43.821248
+import os

# 2016-03-16 21:59:11.596754
+import socket

# 2016-03-16 21:59:17.040683
+socket.gethostbyname()

# 2016-03-16 21:59:35.983496
+socket.gethostbyname?

# 2016-03-16 21:59:45.676510
+socket.gethostbyname('127.0.0.1')

# 2016-03-16 21:59:52.544561
+socket.gethostbyname('localhost')

# 2016-03-16 22:00:21.271705
+socket.getfqdn

# 2016-03-16 22:00:22.968898
+socket.getfqdn()

# 2016-03-16 22:07:16.981380
+import pygame,os

# 2016-03-16 23:59:20.724475
+import pygame

# 2016-03-16 23:59:26.325488
+pygame.font.get_fonts()

# 2016-03-17 20:53:31.017628
+3/2

# 2016-03-17 20:53:34.320256
+3//2

# 2016-03-17 20:53:49.795810
+3/2.0

# 2016-03-17 20:53:53.174581
+3//2

# 2016-03-17 20:54:05.255609
+3/2

# 2016-03-17 20:54:09.341080
+3//2

# 2016-03-17 21:03:54.248179
+from serial import Serial

# 2016-03-17 23:48:40.449869
+import threading

# 2016-03-17 23:49:09.994691
+from threading import Thread

# 2016-03-17 23:52:38.509849
+Thread.run?

# 2016-03-17 23:53:44.605569
+Thread.start?

# 2016-03-18 14:27:23.831463
+import serial

# 2016-03-18 14:27:30.642644
+s = serial.Serial("/dev/ttyUSB0", 9600)

# 2016-03-18 14:28:24.165600
+s = serial.Serial("/dev/ttyUSB0", baudrate=9600)

# 2016-03-18 14:28:43.883454
+import select

# 2016-03-18 14:30:08.198668
+while 1:
+    rd, _ = select.select([s], [], [s])
+    if rd[0] is s:
+        if s.read(1) == 0x7f:
+            length = int(s.read(1))
+            data = s.read(length)
+            print(data)
+            

# 2016-03-18 14:30:37.530275
+while 1:
+    rd, wd, err = select.select([s], [], [s])
+    if rd[0] is s:
+        if s.read(1) == 0x7f:
+            length = int(s.read(1))
+            data = s.read(length)
+            print(data)
+            

# 2016-03-18 14:30:48.004509
+s.read()

# 2016-03-18 14:31:08.997557
+while 1:
+    rd, wd, err = select.select([s], [], [s])
+    if rd[0] is s:
+        if s.read(1) == 0x7f:
+            length = int(s.read(1))
+            data = s.read(length)
+            print(data)

# 2016-03-18 14:31:22.891012
+s.read()

# 2016-03-18 14:31:29.815824
+a = _

# 2016-03-18 14:31:30.318088
+a

# 2016-03-18 14:31:33.207605
+type(a)

# 2016-03-18 14:31:40.097694
+a = '\x7f'

# 2016-03-18 14:31:43.880106
+a = _

# 2016-03-18 14:31:49.963274
+a = s.read()

# 2016-03-18 14:31:54.017328
+type(a)

# 2016-03-18 14:32:02.048153
+a

# 2016-03-18 14:32:11.091626
+a == '\t'

# 2016-03-18 14:32:33.650819
+int(a)

# 2016-03-18 14:32:46.691330
+char(a)

# 2016-03-18 14:32:50.051495
+chr(a)

# 2016-03-18 14:37:29.918843
+help(int.conjugate)

# 2016-03-18 14:38:06.785899
+a = '\x7f'

# 2016-03-18 14:38:07.276681
+a

# 2016-03-18 14:38:36.688123
+int(a)

# 2016-03-18 14:38:50.410412
+int.bit_length

# 2016-03-18 14:41:21.649045
+int(a, 0)

# 2016-03-18 14:43:33.678639
+bytearray(a)

# 2016-03-18 14:43:36.321099
+a[0]

# 2016-03-18 14:43:59.656832
+b = bytearray(a)

# 2016-03-18 14:44:00.607177
+b

# 2016-03-18 14:44:02.217551
+b[0]

# 2016-03-18 14:44:46.812151
+bytes(a)

# 2016-03-18 14:44:54.934330
+_

# 2016-03-18 14:45:00.255823
+bytes(a)[0]

# 2016-03-18 14:46:16.450676
+help(bytes)

# 2016-03-18 14:46:50.374747
+a = '\x7f\x00'

# 2016-03-18 14:46:55.289346
+b = bytearray(a)

# 2016-03-18 14:46:56.176212
+b

# 2016-03-18 14:47:03.490359
+b[0:2]

# 2016-03-18 14:47:07.199587
+b[0:1]

# 2016-03-18 14:47:12.583988
+b[0]

# 2016-03-18 14:49:12.740337
+chr(127)

# 2016-03-18 14:49:23.895149
+hex(127)

# 2016-03-18 14:49:36.708323
+help(hex)

# 2016-03-18 14:49:58.290285
+n = 127

# 2016-03-18 14:50:03.769607
+n.numerator

# 2016-03-18 14:50:22.771866
+help(int.numerator)

# 2016-03-18 14:50:28.590598
+hex(n)

# 2016-03-18 14:50:58.715457
+"{}".format(n)

# 2016-03-18 14:51:39.799376
+"{:h}".format(n)

# 2016-03-18 14:52:10.394057
+"{:x}".format(n)

# 2016-03-18 14:52:22.181577
+"{:X}".format(n)

# 2016-03-18 14:53:11.845059
+a = b'\x01'

# 2016-03-18 14:53:12.556263
+a

# 2016-03-18 14:53:15.281761
+type(a)

# 2016-03-18 14:53:26.214057
+a = bytearray('\x01')

# 2016-03-18 14:53:28.558465
+a[0]

# 2016-03-18 14:53:48.079354
+a = bytearray('\x01\x01')

# 2016-03-18 14:53:53.568573
+"{:X}".format(a)

# 2016-03-18 14:54:02.734002
+"{:X}".format(a[0])

# 2016-03-18 14:54:07.820140
+"{:2X}".format(a[0])

# 2016-03-18 14:54:14.109939
+"{:02X}".format(a[0])

# 2016-03-18 14:54:23.885797
+"{:02X}".format(a[0:1])

# 2016-03-18 15:46:33.994601
+import os

# 2016-03-18 15:46:38.974029
+pipe = os.pipe()

# 2016-03-18 15:46:40.027990
+pipe

# 2016-03-18 15:46:50.753162
+os.write(pipe[1], 'x')

# 2016-03-18 15:46:58.932943
+os.read(pipe[0], 1)

# 2016-03-18 16:20:24.958017
+import pyusb

# 2016-03-18 16:21:53.759466
+import usb

# 2016-03-18 22:53:25.548900
+import ConfigParser

# 2016-03-19 16:39:31.675985
+config = ConfigParser.ConfigParser()

# 2016-03-19 16:39:37.886721
+config.read('udisks.ini')

# 2016-03-19 16:39:43.453193
+config.sections()

# 2016-03-19 16:49:48.227879
+config.get('UDISK1', 'idVendor')

# 2016-03-19 16:49:54.992563
+config.get('UDISK1', 'idVendor', 0)

# 2016-03-19 16:49:57.013985
+config.get('UDISK1', 'idVendor', 1)

# 2016-03-19 17:03:02.591369
+import usb.core

# 2016-03-19 17:03:05.601941
+import usb.util

# 2016-03-19 17:05:26.694069
+dev = usb.core.find(find_all=True, bDeviceClass=8)

# 2016-03-19 17:05:28.084512
+dev

# 2016-03-19 17:05:58.142478
+u = dev.next()

# 2016-03-19 17:07:03.728217
+dev = usb.core.find(find_all=True, bDeviceClass=8)

# 2016-03-19 17:07:11.123724
+u = dev.next()

# 2016-03-19 17:28:25.461718
+dev = usb.core.find(bDeviceClass=8)

# 2016-03-19 17:28:26.502850
+dev

# 2016-03-19 17:28:31.713027
+print(dev)

# 2016-03-19 17:28:42.484250
+dev = usb.core.find(bDeviceClass=7)

# 2016-03-19 17:28:44.937753
+dev

# 2016-03-19 17:28:57.695156
+usb.core.find(bDeviceClass=7)

# 2016-03-20 21:22:02.283019
+import os

# 2016-03-20 21:22:09.785665
+os.mkfifo('rfid')

# 2016-03-21 08:54:14.690142
+import math

# 2016-03-21 08:54:39.033903
+t = tan(0.1*pi/180/3600)

# 2016-03-21 08:54:44.115558
+t = math/tan(0.1*pi/180/3600)

# 2016-03-21 08:54:48.903389
+t = math.tan(0.1*pi/180/3600)

# 2016-03-21 08:54:56.188609
+import math.tan

# 2016-03-21 08:55:03.333428
+from math import tan,pi

# 2016-03-21 08:55:06.538111
+t = tan(0.1*pi/180/3600)

# 2016-03-21 08:55:07.492343
+t

# 2016-03-21 08:55:11.596033
+0.48/t

# 2016-03-21 08:55:22.119822
+_*1000

# 2016-03-21 08:55:31.762608
+0.48/t/1000

# 2016-03-21 08:59:21.482082
+344*40/3600

# 2016-03-21 09:09:47.440490
+15/60

# 2016-03-21 09:10:43.948005
+tan(0.53*pi/180)

# 2016-03-21 09:12:22.832156
+15/1024

# 2016-03-21 09:18:09.047051
+tan(0.53*pi/180)

# 2016-03-21 09:21:41.777827
+t

# 2016-03-21 09:21:47.863068
+t*100000

# 2016-03-21 09:23:54.737114
+5400/15

# 2016-03-21 09:27:43.960557
+math.sqrt(60)

# 2016-03-21 09:27:52.224116
+_/1327

# 2016-03-21 09:28:17.084336
+1/_

# 2016-03-21 09:29:38.962522
+15/50/600000

# 2016-03-21 09:29:50.148575
+math.atan2(_)

# 2016-03-21 09:29:54.107673
+math.atan2?

# 2016-03-21 09:30:10.146245
+math.atan(5e-7)

# 2016-03-21 09:30:55.158013
+_*180/pi

# 2016-03-21 09:32:16.431032
+pi/180/3600

# 2016-03-21 09:32:53.575632
+math.atan(5e-7)*pi/180/3600

# 2016-03-21 09:32:59.695078
+math.atan(5e-7)*pi/180*3600

# 2016-03-21 09:33:26.782803
+math.atan(5e-7)*180/pi*3600

# 2016-03-21 09:35:00.064341
+5400/4.8

# 2016-03-21 09:35:33.752207
+1125/12

# 2016-03-21 09:35:40.476508
+math.sqrt(_)

# 2016-03-21 09:35:51.175593
+_/3981

# 2016-03-21 09:35:54.650053
+_*3

# 2016-03-21 09:36:10.840358
+1/_

# 2016-03-21 09:37:07.655859
+t

# 2016-03-21 09:37:17.255600
+600*t

# 2016-03-21 09:39:13.007545
+15/50/100000

# 2016-03-21 09:39:24.984566
+math.atan(3e-6)*180/pi*3600

# 2016-03-21 09:41:12.049481
+6/1327

# 2016-03-21 09:41:15.891090
+1/_

# 2016-03-21 09:43:58.806375
+math.sqrt(17)/math.sqrt(12)*3/3981

# 2016-03-21 09:44:03.669512
+1/_

# 2016-03-21 09:44:13.165685
+_/3

# 2016-03-21 09:47:59.680018
+math.sqrt(17)/math.sqrt(12)*3*3/3981

# 2016-03-21 09:48:03.346550
+1/_

# 2016-03-21 13:31:02.944175
+ls

# 2016-03-21 13:31:05.178681
+%ls

# 2016-03-22 16:58:16.710857
+leaks = []

# 2016-03-22 16:58:42.820810
+class My(object):
+    def __add__(self, other):
+        leaks.append(self)
+        return self

# 2016-03-22 16:58:49.738147
+a = My() + My()

# 2016-03-22 16:58:50.446920
+a

# 2016-03-22 16:58:56.955208
+leaks

# 2016-03-22 20:15:50.398748
+import os

# 2016-03-22 20:20:04.690776
+os.getenv('HOME')

# 2016-03-25 00:37:36.823981
+int('FF00')

# 2016-03-25 00:37:41.066547
+int('FF00',16)

# 2016-03-25 00:37:47.193464
+255*256

# 2016-03-27 17:48:50.734411
+import socket

# 2016-03-27 17:49:25.517583
+s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 2016-03-27 20:52:29.607380
+from __future__ import print_function

# 2016-03-27 20:52:35.189057
+type(print)

# 2016-03-27 22:23:32.977011
+import socket

# 2016-03-27 22:23:35.990714
+s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 2016-03-27 22:23:44.500524
+s.bind('127.0.0.1', 9999)

# 2016-03-27 22:24:01.452394
+s.bind(('127.0.0.1', 9999))

# 2016-03-27 22:24:07.824353
+import socket

# 2016-03-27 22:24:12.147901
+s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 2016-03-27 22:24:16.353774
+s.bind(('127.0.0.1', 9999))

# 2016-03-27 22:33:29.066386
+from multiprocessing import Pipe

# 2016-03-27 22:33:34.860667
+p = Pipe()

# 2016-03-27 22:33:35.662119
+p

# 2016-03-28 03:35:14.998202
+import sqlitedict

# 2016-03-28 03:35:42.593417
+from sqlitedict import SqliteDict

# 2016-03-28 03:37:16.839780
+with SqliteDict('staff.db') as keys:
+    keys['68F82A1E'] = u"æœ±æŒ¯æ¶›"

# 2016-03-28 03:40:00.352942
+with SqliteDict('staff.db') as keys:
+    print keys['68F82A1']

# 2016-03-28 04:06:36.862821
+import glib

# 2016-03-28 04:06:45.983739
+from pyudev import Context,Monitor

# 2016-03-28 04:07:04.994634
+from pyudev.glib import MonitorObserver

# 2016-03-28 04:07:40.332859
+def device_event(observer, device):
+    print 'event {0} on device {1}'.format(device.action, device)

# 2016-03-28 04:07:47.488307
+context = Context()

# 2016-03-28 04:08:08.080933
+monitor = Monitor.from_netlink(context)

# 2016-03-28 04:08:22.471836
+monitor.filter_by(subsystem='usb')

# 2016-03-28 04:08:33.320449
+observer = MonitorObserver(monitor)

# 2016-03-28 04:08:46.144373
+observer.connect('device-event', device_event)

# 2016-03-28 04:08:54.997217
+monitor.start()

# 2016-03-28 04:10:06.983914
+glib.MainLoop().run()

# 2016-03-29 15:03:14.090191
+from sqlitedict import SqliteDict

# 2016-03-29 15:03:24.981725
+with SqliteDict('staff.db') as keys:
+    keys['68F82A1E'] = u"æœ±æŒ¯æ¶›"

# 2016-04-26 16:37:36.426784
+import os

# 2016-04-26 16:37:41.192372
+os.get_terminal_size()

# 2016-04-27 14:38:38.284475
+map = {}

# 2016-04-27 14:38:43.866201
+map[1, 2] = 3

# 2016-04-27 14:38:45.696496
+map

# 2016-04-27 14:42:22.652582
+a = [1, 2, 3]

# 2016-04-27 14:42:26.052834
+del a[0]

# 2016-04-27 14:42:26.582251
+a

# 2016-04-27 14:42:35.655388
+del?

# 2016-04-28 08:42:22.132321
+def fib(n):
+    if n<2:
+        return n
+    else:
+        a = 0
+        b = 1
+        for i in range(n-1):
+            a, b = b, a+b
+        return b

# 2016-04-28 08:42:37.755019
+print(fib(1000000)>1)

# 2016-04-28 08:42:53.924666
+print(fib(10000000)>1)

# 2016-04-28 08:44:33.305194
+%profile fib(1000000)

# 2016-04-28 15:03:40.229780
+from parse import master_pat

# 2016-04-28 15:04:10.239661
+with open("./test.txt", 'r') as f:
+    src = [e for e in f]

# 2016-04-28 15:04:11.486025
+src

# 2016-04-28 15:04:30.559461
+import re

# 2016-04-28 15:04:34.343706
+import collections

# 2016-04-30 00:23:30.319262
+import math

# 2016-04-30 00:23:32.940488
+math.log?

# 2016-04-30 00:23:49.754372
+math.log(16)

# 2016-04-30 00:24:02.637219
+math.log(2)

# 2016-04-30 00:24:12.421147
+math.log(16, 2)

# 2016-04-30 00:24:30.670620
+import cmath

# 2016-04-30 00:24:38.807751
+cmath.log(16, 2)

# 2016-04-30 00:25:19.210607
+4.0 == math.log(16, 2)

# 2016-04-30 00:25:29.383801
+int(4.0)

# 2016-04-30 00:30:24.504665
+int(5.6)
