"skt041959
"scriptencoding utf8

if !has('nvim')
    set nocompatible

    filetype off
    set runtimepath+=~/.vim/bundle/Vundle.vim
    call vundle#begin() "{{{
    Plugin 'gmarik/Vundle.vim'
    "Plugin 'amoffat/snake'
    Plugin 'thinca/vim-quickrun'
    "Plugin 'lambdalisue/vim-pyenv'
    "Plugin 'jmcantrell/vim-virtualenv'
    Plugin 'tmhedberg/SimpylFold'

    "Plugin 'KabbAmine/zeavim.vim'

    "Plugin 'jlanzarotta/bufexplorer'
    Plugin 'kshenoy/vim-signature'

    Plugin 'scrooloose/syntastic'
    "Plugin 'davidhalter/jedi-vim'
    "Plugin 'Valloric/YouCompleteMe'
    Plugin 'rdnetto/YCM-Generator'

    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'terryma/vim-multiple-cursors'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'scrooloose/nerdtree'
    Plugin 'Raimondi/delimitMate'
    Plugin 'tpope/vim-surround'
    Plugin 'honza/vim-snippets'
    Plugin 'SirVer/ultisnips'
    Plugin 'mbbill/fencview'
    Plugin 'mbbill/undotree'
    "Plugin 'DoxygenToolkit.vim'

    Plugin 'Shougo/unite.vim'
    Plugin 'Shougo/vimproc.vim'
    Plugin 'Shougo/unite-outline'
    Plugin 'Shougo/neoyank.vim'
    Plugin 'easymotion/vim-easymotion'

    Plugin 'tpope/vim-fugitive'
    Plugin 'airblade/vim-gitgutter'

    Plugin 'majutsushi/tagbar'
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'kopischke/vim-stay'

    Plugin 'rust-lang/rust.vim'
    Plugin 'phildawes/racer'

    Plugin 'vim-pandoc/vim-pandoc'
    Plugin 'vim-pandoc/vim-pandoc-syntax'
    Plugin 'vim-pandoc/vim-pandoc-after'
    Plugin 'dhruvasagar/vim-table-mode'

    Plugin 'fatih/vim-go'

    Plugin 'peterhoeg/vim-qml'

    Plugin 'skt041959/markdown-preview.vim'

    Plugin 'a.vim'
    Plugin 'Mark--Karkat'
    Plugin 'renamer.vim'
    Plugin 'fcitx.vim'

    Plugin 'kurayama/systemd-vim-syntax'
    Plugin 'chrisbra/csv.vim'

    Plugin 'lambdalisue/vim-gista'
    Plugin 'guns/xterm-color-table.vim'
    Plugin 'skt041959/vim-color-skt'
    "}}}
    call vundle#end()
endif

filetype plugin indent on

syntax enable
set background=dark
"set background=light
"let g:solarized_termcolors=256
"colorscheme jellybeans_skt
colorscheme darkblack_skt
"colorscheme jellybeans

set synmaxcol=1000
set timeoutlen=4000
set ttimeoutlen=100
set updatetime=300

augroup BASIC "{{{
    autocmd!
    "stm32
    autocmd FileType c                    syn keyword cType u8 u16 u32 s8 s16 s32
    autocmd FileType c,cpp                syn keyword cType UINT8 UINT32

    "opencv
    autocmd FileType cpp                  syn keyword cType int8 uchar int64
    autocmd FileType cpp                  syn keyword Type cv Mat Point Rect Scalar Size Vec3b


    "autocmd FileType python               setlocal foldignore='#'
    "autocmd FileType python               setlocal foldmethod=indent
    autocmd FileType cmake                setlocal foldmethod=indent
    autocmd FileType verilog              setlocal foldmethod=syntax
    autocmd FileType xml,svg,vim,qml      setlocal foldmethod=indent
    autocmd FileType xml                  setlocal tabstop=2 shiftwidth=2

    "autocmd BufNewFile,BufRead *.pro set filetype=qtproject

    autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf* set ft=tmux
    autocmd BufNewFile,BufRead *.dat set ft=dat
augroup END "}}}

let g:mapleader = ';'

set noerrorbells vb t_vb=
autocmd GUIEnter * set vb t_vb=

set number
set autowrite
"au BufEnter * set noro
set backspace=indent,eol,start
set guifont=Droid\ Sans\ Mono\ 10
set guifontwide=Source\ Han\ Sans\ SC\ 10
set guioptions=aegit
set wildmode=longest,list,full
set wildmenu
set mouse=a

set expandtab
set tabstop=4
set shiftwidth=4
set fileencodings=utf-8,cp936,cp932,gb2312,gb18030,gbk,ucs-bom
set grepprg=grep\ -nH\ $*

set cursorline
set hlsearch
set showcmd
set showmatch
set ignorecase smartcase

set laststatus=2
set statusline=%F%m%r,%Y,%{&fileformat}\ |%{&fileencoding}|\ ASC=%b,HEX=%B\ \ %l,%c%V\ %=%p%%\ \ [\ %L\ ]
set shell=zsh

set cscopequickfix=s-,c-,d-,i-,t-,e-
set cscopetag
"set cscopeverbose

set foldmethod=syntax
set foldlevel=100

set completeopt-=preview
set completeopt+=menuone
set completeopt+=longest

set makeprg=make\ \-j\ 2
nnoremap <C-B> :make!<CR>

set viewoptions=cursor,folds,slash,unix

set sessionoptions-=options
set sessionoptions-=blank
set sessionoptions-=folds

if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Don't cancel visual select when shifting
xnoremap <  <gv
xnoremap >  >gv

" Don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz

nnoremap <C-u> <C-b>zz
nnoremap <C-d> <C-f>zz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-d> <C-d>zz
vnoremap <C-f> <C-f>zz
vnoremap <C-b> <C-b>zz

nnoremap <leader>k <C-W>k
nnoremap <leader>j <C-W>j
nnoremap <leader>h <C-W>h
nnoremap <leader>l <C-W>l
nnoremap <leader>p <C-W>p

nnoremap <leader>3 :tabp<CR>
nnoremap <leader>4 :tabn<CR>
" Buffers navigation and management
nnoremap <silent> + :bn<CR>
nnoremap <silent> _ :bp<CR>

" Ctags navigation (:tselect to select from menu)
nnoremap ]t :tn<CR>
nnoremap [t :tp<CR>

" Quick-fix window navigation
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>

" Location list navigation
nnoremap ]l :lnext<CR>
nnoremap [l :lprevious<CR>

" Error mnemonic (Neomake uses location list)
nnoremap ]e :lnext<CR>
nnoremap [e :lprevious<CR>

nnoremap <C-Q>      :q!<CR>
nnoremap <leader>qq :q<CR>
nnoremap <leader>w  :up<CR>
nnoremap <leader>s  :split<CR>
nnoremap <leader>v  :vsplit<CR>

" Yank and paste from clipboard
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p

" Intelligent windows resizing using Ctrl + arrow keys
nnoremap <silent> <C-Right> :call utils#intelligentVerticalResize('right')<CR>
nnoremap <silent> <C-Left> :call utils#intelligentVerticalResize('left')<CR>
nnoremap <silent> <C-Up> :resize +1<CR>
nnoremap <silent> <C-Down> :resize -1<CR>

noremap <F1> <Esc>
"nnoremap <F2> :set wrap! wrap?<CR>
nnoremap <F3> :set number! number?<CR>
"nnoremap <F3> :set list! list?<CR>

"set paste
"autocmd InsertLeave * set nopaste " disbale paste mode when leaving insert mode
nnoremap <F2> :set paste! paste?<CR>
nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>
nnoremap <F12> :set spell!<CR>

"====command-map===={{{
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
"}}}
cnoremap w!! w !sudo tee >/dev/null %
cnoremap make make!

command -nargs=* -complete=help Help vertical belowright help <args>
"====fix-command-shift-error===={{{
cnoreabbr <expr> Qa ((getcmdtype() == ':' && getcmdline() =~# '^Qa')?('qa'):('Qa'))
cnoreabbr <expr> Wa ((getcmdtype() == ':' && getcmdline() =~# '^Wa')?('wa'):('Wa'))
cnoreabbr <expr> Wq ((getcmdtype() == ':' && getcmdline() =~# '^Wq')?('wq'):('Wq'))
cnoreabbr <expr> Q  ((getcmdtype() == ':' && getcmdline() =~# '^Q')?('q'):('Q'))
cnoreabbr <expr> W  ((getcmdtype() == ':' && getcmdline() =~# '^W')?('w'):('W'))
"}}}

"====AutoSetFileHead===={{{
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype ==? 'sh'
        call setline(1, '#!/bin/bash')
    endif

    "如果文件类型为python
    if &filetype ==? 'python'
        "    call setline(1, '#!/usr/bin/env python')
        call append(1, '# encoding: utf-8')
    endif

    exec 'normal G'
    exec 'normal o'
    exec 'normal o'
endfunc
augroup FILEHEAD
    autocmd!
    autocmd BufNewFile *.sh exec ':call AutoSetFileHead()'
    autocmd BufNewFile *.py exec ':call AutoSetFileHead()'
augroup END
"}}}

"====StripTrailingWhitespaces===={{{
fun! <SID>StripTrailingWhitespaces()
    let l:l = line('.')
    let l:c = col('.')
    exec '%s/\s\+$//e'
    call cursor(l:l, l:c)
endfun
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,verilog,verilog_systemverilog,vhdl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
"}}}

if isdirectory('./build')
    set makeprg=make\ \-j\ 2\ -C\ build
endif

"=============plugin below================
nnoremap <leader>S :call EMksession()<CR>

nnoremap <C-E> :A<CR>
"nnoremap <C-S-E> :AS<CR>

nnoremap <leader>e :FencView<CR>

let g:NERDCustomDelimiters = {'c': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' } }

"====zealdoc===={{{
let g:zv_disable_mapping = 1
nmap gz <Plug>Zeavim
vmap gz <Plug>ZVVisSelection
nmap gZ <Plug>ZVKeyDocset
let g:zv_file_types = {
            \ 'python': 'python 3,numpy',
            \ 'vim': 'vim',
            \ }
let g:zv_docsets_dir = '/home/skt/.local/share/Zeal/Zeal/docsets'
"nnoremap gz :!zeal 'dash://<cword>'&<CR><CR>
"}}}

"====tagbar===={{{
nnoremap <leader>tg :TagbarOpen j<CR>
nnoremap <leader>to :TagbarOpenAutoClose<CR>
nnoremap <leader>tf :TagbarTogglePause<CR>
nnoremap <silent> <leader>tl :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_width = 21
let g:tagbar_sort = 0
let g:tagbar_indent = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_autoclose = 1
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
"}}}

"====undotree===={{{
nnoremap <leader>ul :UndotreeToggle<CR>
let g:undotree_WindowLayout = 4
let g:undotree_SplitWidth = 30
let g:undotree_SetFocusWhenToggle = 1
"}}}

"====NERDTree===={{{
nnoremap <leader>fl :NERDTreeToggle<CR>
nnoremap <leader>ff :NERDTreeFind<CR>
let g:NERDTreeWinPos = 'right'
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
"}}}

"====bufE===={{{
let g:bufExplorerShowRelativePath = 1
let g:bufExplorerSplitVertSize = 30
let g:bufExplorerSplitRight = 0
let g:bufExplorerSortBy = 'name'
"}}}

"====delimitMate===={{{
let b:delimitMate_jump_expansion = 1
let b:delimitMate_expand_cr = 2
let g:delimitMate_excluded_regions = 'Comment,String'
"}}}

"====ycm===={{{
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'qf' : 1,
            \ 'notes' : 1,
            \ 'markdown' : 1,
            \ 'unite' : 1,
            \ 'plugins' : 1,
            \ 'text' : 1,
            \ 'vimwiki' : 1,
            \ 'pandoc' : 1,
            \ 'infolog' : 1,
            \ 'mail' : 1,
            \}
let g:ycm_confirm_extra_conf = 0
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_key_invoke_completion = '<C-c>'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_error_symbol = '✗'
let g:ycm_warning_symbol = '⚠'
let g:ycm_python_binary_path = '/usr/bin/python2'
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_rust_src_path = '/usr/src/rust/src/'
nnoremap <leader>yg :YcmCompleter GoTo<CR>
nnoremap <leader>yd :YcmCompleter GetDoc <C-R>w<CR>
nnoremap <leader>yf :YcmForceCompileAndDiagnostics<CR>

function! Ycm_preview()
python << EOF
if 'preview' in vim.options['completeopt']:
    vim.command('set completeopt-=preview')
else:
    vim.command('set completeopt+=preview')
    vim.command('set previewheight=5')
    print(vim.options['completeopt'])
EOF
endfunction
"nmap <silent> <leader>u :call Ycm_preview()<CR>
"}}}

"=====pymode===={{{
let g:pymode_python = 'python'
let g:pymode_indent = 0
let g:pymode_folding = 1
let g:pymode_motion = 0
let g:pymode_doc = 0
let g:pymode_run = 0
let g:pymode_breakpoint = 0
let g:pymode_lint = 0
let g:pymode_rope = 0
let g:pymode_syntax = 0
"}}}

"====UltiSnips===={{{
let g:UltiSnipsExpandTrigger='<C-k>'
let g:UltiSnipsJumpForwardTrigger='<C-k>'
let g:UltiSnipsJumpBackwardTrigger='<leader><s-tab>'
let g:UltiSnipsUsePythonVersion = 2
"}}}

"====syntastic===={{{
let g:syntastic_python_checkers = []
let g:syntastic_java_checkers = []
let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_pyflakes_quiet_messages = {
            \ '!level':  'errors',
            \ 'type':    'style' }
let g:syntastic_python_flake8_quiet_messages = {
            \ '!level':  'errors',
            \ 'regex': 'line too long' }
let g:syntastic_c_checkers = []
let g:syntastic_cpp_checkers = []
let g:syntastic_cuda_checkers = []
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
"}}}

"====jedi-vim===={{{
let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#use_splits_not_buffers = 'winwidth'
let g:jedi#popup_select_first = 0
let g:jedi#smart_auto_mappings = 1
nnoremap <silent> <buffer> <leader>jd :call jedi#goto()<cr>
nnoremap <silent> <buffer> K :call jedi#show_documentation()<cr>
"}}}

"====airline===={{{
let g:airline_theme = 'light'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '◀'
"let g:airline_left_alt_sep = '▶'
"let g:airline_right_alt_sep = '◀'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#flags = 's'
let g:airline_extensions = ['branch',
            \ 'tabline',
            \ 'hunks',
            \ 'whitespace',
            \ 'unite',
            \ 'virtualenv',
            \ 'tagbar',
            \ ]
"}}}

"====unite===={{{
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <space>f :Unite -start-insert file_rec/async:.<CR>
nnoremap <space>g :Unite grep:.::<C-R><C-W><CR>
nnoremap <space>G :Unite grep:%::<C-R><C-W><CR>
vnoremap <space>g y<Esc>:silent exec
            \ ":<C-u>Unite grep:.::<C-R>"<CR>"<CR>
vnoremap <space>G y<Esc>:silent exec
            \ ":<C-u>Unite grep:%::<C-R>"<CR>"<CR>
nnoremap <space>s :Unite grep:.<CR>
nnoremap <space>t :Unite -start-insert outline<CR>
nnoremap <space>y :Unite history/yank<CR>
nnoremap <space>b :Unite buffer<CR>
nnoremap <space>j :Unite jump<CR>
nnoremap <space>Y :Unite output/shellcmd:ydcv:<C-R><C-W><CR>
vnoremap <space>Y y<Esc>:silent exec
            \ ":<C-u>Unite output/shellcmd:ydcv:<C-R>"<CR>"<CR>
nnoremap <space>r :UniteResume<CR>
let g:unite_source_grep_max_candidates = 1000
if executable('ag')
    " Use ag in unite grep source.
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '-i --line-numbers --nocolor --nogroup --hidden '
                \.'--ignore '.'.hg'
                \.' --ignore '.'.svn'
                \.' --ignore '.'.git'
                \.' --ignore '.'.bzr'
                \.' --ignore '.'cscope*'
                \.' --ignore '.'tags'
    let g:unite_source_grep_recursive_opt = ''
endif
"}}}

"====easymotion===={{{
map ' <Plug>(easymotion-prefix)
"let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
let g:EasyMotion_prompt = '{n}>>> '
"nmap 'w <Plug>(easymotion-w)
"nmap 'b <Plug>(easymotion-b)
nmap 's <Plug>(easymotion-s2)
nmap 't <Plug>(easymotion-t2)
"}}}

"====pandoc===={{{
function! ToHtml()
    exec 'w'
    exec '!pandoc  -s -S --self-contained -c style.css % -o %<.html '
endfunction

function! ToPdf()
    exec 'w'
    exec '!pandoc  % -o %<.pdf --latex-engine=xelatex --template=another.tex'
endfunction
let g:pandoc#spell#enabled = 0
let g:pandoc#after#modules#enabled = ['unite', 'ultisnips', 'tablemode']
"}}}

"====indentguide===={{{
let g:indent_guides_guide_size = 1
"}}}

"====quickrun===={{{
let g:quickrun_no_default_key_mappings = 1
map <leader>qr <Plug>(quickrun)
let g:quickrun_config={
            \'_' : {
            \    'runner' : 'vimproc',
            \    'runner/vimproc/updatetime' : 60,
            \    },
            \'qml/qmlscene' : {
            \    'command': 'qmlscene',
            \    'exec': '%c %s:p',
            \    'runner': 'vimproc',
            \    'outputter': 'buffer',
            \    },
            \}
let g:quickrun_config['qml'] = g:quickrun_config['qml/qmlscene']
"}}}

"====vim-go===={{{
augroup GOMAP
    autocmd!
    autocmd FileType go nmap <leader>gb <Plug>(go-build)
    autocmd FileType go nmap <leader>gt <Plug>(go-test)
    autocmd FileType go nmap <leader>gc <Plug>(go-coverage)
    autocmd FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    autocmd FileType go nmap <Leader>gd <Plug>(go-def-vertical)
    autocmd FileType go nmap <Leader>gi <Plug>(go-info)
augroup END
"}}}

"====gitgutter===={{{
let g:gitgutter_map_keys = 0
nmap <space>] <Plug>GitGutterNextHunk
nmap <space>[ <Plug>GitGutterPrevHunk
nmap <space>a <Plug>GitGutterStageHunk
nmap <space>u <Plug>GitGutterRevertHunk
"}}}

"====SimpylFold===={{{
"autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
"autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 1
"}}}

"====neoman===={{{
set keywordprg=:Nman
autocmd FileType vim                  set keywordprg=
"}}}

" vim: set ft=vim fdm=marker:
